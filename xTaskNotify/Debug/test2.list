
test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004364  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08004504  08004504  00014504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004630  08004630  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004630  08004630  00014630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004638  08004638  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004638  08004638  00014638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800463c  0800463c  0001463c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040a0  20000074  080046b4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004114  080046b4  00024114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131df  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b9a  00000000  00000000  00033283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  00035e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f58  00000000  00000000  00036e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001803b  00000000  00000000  00037dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010dec  00000000  00000000  0004fe13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009648c  00000000  00000000  00060bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f708b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047c0  00000000  00000000  000f70e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080044ec 	.word	0x080044ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080044ec 	.word	0x080044ec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <vApplicationGetIdleTaskMemory+0x30>)
 800058e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000090 	.word	0x20000090
 80005a8:	200000e4 	.word	0x200000e4

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b5b0      	push	{r4, r5, r7, lr}
 80005ae:	b08e      	sub	sp, #56	; 0x38
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fb25 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f845 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f8d5 	bl	8000768 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005be:	f000 f8a9 	bl	8000714 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, button_Task, osPriorityNormal, 0, 500);
 80005c2:	4b19      	ldr	r3, [pc, #100]	; (8000628 <main+0x7c>)
 80005c4:	f107 041c 	add.w	r4, r7, #28
 80005c8:	461d      	mov	r5, r3
 80005ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 f832 	bl	8002646 <osThreadCreate>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a11      	ldr	r2, [pc, #68]	; (800062c <main+0x80>)
 80005e6:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, Led_Task, osPriorityNormal, 0, 500);
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <main+0x84>)
 80005ea:	463c      	mov	r4, r7
 80005ec:	461d      	mov	r5, r3
 80005ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80005fa:	463b      	mov	r3, r7
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 f821 	bl	8002646 <osThreadCreate>
 8000604:	4603      	mov	r3, r0
 8000606:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <main+0x88>)
 8000608:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800060a:	f002 f815 	bl	8002638 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 sprintf(uart_mes,"\n this is demo taskNotify\r\n");
 800060e:	490a      	ldr	r1, [pc, #40]	; (8000638 <main+0x8c>)
 8000610:	480a      	ldr	r0, [pc, #40]	; (800063c <main+0x90>)
 8000612:	f003 fb4b 	bl	8003cac <siprintf>
 HAL_UART_Transmit(&huart2, (uint8_t*)uart_mes,sizeof(uart_mes),500);
 8000616:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800061a:	2228      	movs	r2, #40	; 0x28
 800061c:	4907      	ldr	r1, [pc, #28]	; (800063c <main+0x90>)
 800061e:	4808      	ldr	r0, [pc, #32]	; (8000640 <main+0x94>)
 8000620:	f001 fd4d 	bl	80020be <HAL_UART_Transmit>
  while (1)
 8000624:	e7fe      	b.n	8000624 <main+0x78>
 8000626:	bf00      	nop
 8000628:	08004534 	.word	0x08004534
 800062c:	20004044 	.word	0x20004044
 8000630:	08004550 	.word	0x08004550
 8000634:	20004048 	.word	0x20004048
 8000638:	08004518 	.word	0x08004518
 800063c:	2000404c 	.word	0x2000404c
 8000640:	20004074 	.word	0x20004074

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	; 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f003 fb22 	bl	8003c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b27      	ldr	r3, [pc, #156]	; (800070c <SystemClock_Config+0xc8>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a26      	ldr	r2, [pc, #152]	; (800070c <SystemClock_Config+0xc8>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b24      	ldr	r3, [pc, #144]	; (800070c <SystemClock_Config+0xc8>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b21      	ldr	r3, [pc, #132]	; (8000710 <SystemClock_Config+0xcc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a20      	ldr	r2, [pc, #128]	; (8000710 <SystemClock_Config+0xcc>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <SystemClock_Config+0xcc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2310      	movs	r3, #16
 80006aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b4:	2308      	movs	r3, #8
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80006b8:	2364      	movs	r3, #100	; 0x64
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fdb1 	bl	8001230 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d4:	f000 f930 	bl	8000938 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	2103      	movs	r1, #3
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 f813 	bl	8001720 <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000700:	f000 f91a 	bl	8000938 <Error_Handler>
  }
}
 8000704:	bf00      	nop
 8000706:	3750      	adds	r7, #80	; 0x50
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <MX_USART2_UART_Init+0x50>)
 800071c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800074c:	f001 fc6a 	bl	8002024 <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000756:	f000 f8ef 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20004074 	.word	0x20004074
 8000764:	40004400 	.word	0x40004400

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	4b26      	ldr	r3, [pc, #152]	; (800081c <MX_GPIO_Init+0xb4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a25      	ldr	r2, [pc, #148]	; (800081c <MX_GPIO_Init+0xb4>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b23      	ldr	r3, [pc, #140]	; (800081c <MX_GPIO_Init+0xb4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_GPIO_Init+0xb4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a1e      	ldr	r2, [pc, #120]	; (800081c <MX_GPIO_Init+0xb4>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <MX_GPIO_Init+0xb4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_GPIO_Init+0xb4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a17      	ldr	r2, [pc, #92]	; (800081c <MX_GPIO_Init+0xb4>)
 80007c0:	f043 0308 	orr.w	r3, r3, #8
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <MX_GPIO_Init+0xb4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0308 	and.w	r3, r3, #8
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d8:	4811      	ldr	r0, [pc, #68]	; (8000820 <MX_GPIO_Init+0xb8>)
 80007da:	f000 fcf5 	bl	80011c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007de:	2301      	movs	r3, #1
 80007e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	4619      	mov	r1, r3
 80007f0:	480c      	ldr	r0, [pc, #48]	; (8000824 <MX_GPIO_Init+0xbc>)
 80007f2:	f000 fb4d 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fc:	2301      	movs	r3, #1
 80007fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	4619      	mov	r1, r3
 800080e:	4804      	ldr	r0, [pc, #16]	; (8000820 <MX_GPIO_Init+0xb8>)
 8000810:	f000 fb3e 	bl	8000e90 <HAL_GPIO_Init>

}
 8000814:	bf00      	nop
 8000816:	3720      	adds	r7, #32
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40023800 	.word	0x40023800
 8000820:	40020c00 	.word	0x40020c00
 8000824:	40020000 	.word	0x40020000

08000828 <button_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_button_Task */
void button_Task(void const * argument)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	 sprintf(uart_mes,"\n button_task is running \r\n");
 8000830:	4916      	ldr	r1, [pc, #88]	; (800088c <button_Task+0x64>)
 8000832:	4817      	ldr	r0, [pc, #92]	; (8000890 <button_Task+0x68>)
 8000834:	f003 fa3a 	bl	8003cac <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)uart_mes,sizeof(uart_mes),500);
 8000838:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800083c:	2228      	movs	r2, #40	; 0x28
 800083e:	4914      	ldr	r1, [pc, #80]	; (8000890 <button_Task+0x68>)
 8000840:	4814      	ldr	r0, [pc, #80]	; (8000894 <button_Task+0x6c>)
 8000842:	f001 fc3c 	bl	80020be <HAL_UART_Transmit>
			/* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==1)
 8000846:	2101      	movs	r1, #1
 8000848:	4813      	ldr	r0, [pc, #76]	; (8000898 <button_Task+0x70>)
 800084a:	f000 fca5 	bl	8001198 <HAL_GPIO_ReadPin>
 800084e:	4603      	mov	r3, r0
 8000850:	2b01      	cmp	r3, #1
 8000852:	d1f8      	bne.n	8000846 <button_Task+0x1e>
	  	  {

		  	 while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
 8000854:	bf00      	nop
 8000856:	2101      	movs	r1, #1
 8000858:	480f      	ldr	r0, [pc, #60]	; (8000898 <button_Task+0x70>)
 800085a:	f000 fc9d 	bl	8001198 <HAL_GPIO_ReadPin>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d1f8      	bne.n	8000856 <button_Task+0x2e>
			 sprintf(uart_mes,"\n button is pressed\r\n");
 8000864:	490d      	ldr	r1, [pc, #52]	; (800089c <button_Task+0x74>)
 8000866:	480a      	ldr	r0, [pc, #40]	; (8000890 <button_Task+0x68>)
 8000868:	f003 fa20 	bl	8003cac <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*)uart_mes,sizeof(uart_mes),500);
 800086c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000870:	2228      	movs	r2, #40	; 0x28
 8000872:	4907      	ldr	r1, [pc, #28]	; (8000890 <button_Task+0x68>)
 8000874:	4807      	ldr	r0, [pc, #28]	; (8000894 <button_Task+0x6c>)
 8000876:	f001 fc22 	bl	80020be <HAL_UART_Transmit>
	  		 xTaskNotify(myTask02Handle,0x0,eNoAction);// send notification to the led_task
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <button_Task+0x78>)
 800087c:	6818      	ldr	r0, [r3, #0]
 800087e:	2300      	movs	r3, #0
 8000880:	2200      	movs	r2, #0
 8000882:	2100      	movs	r1, #0
 8000884:	f002 fcc0 	bl	8003208 <xTaskGenericNotify>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==1)
 8000888:	e7dd      	b.n	8000846 <button_Task+0x1e>
 800088a:	bf00      	nop
 800088c:	0800456c 	.word	0x0800456c
 8000890:	2000404c 	.word	0x2000404c
 8000894:	20004074 	.word	0x20004074
 8000898:	40020000 	.word	0x40020000
 800089c:	08004588 	.word	0x08004588
 80008a0:	20004048 	.word	0x20004048

080008a4 <Led_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Led_Task */
void Led_Task(void const * argument)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Led_Task */
	 sprintf(uart_mes,"\n les_task is running \r\n");
 80008ac:	4914      	ldr	r1, [pc, #80]	; (8000900 <Led_Task+0x5c>)
 80008ae:	4815      	ldr	r0, [pc, #84]	; (8000904 <Led_Task+0x60>)
 80008b0:	f003 f9fc 	bl	8003cac <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)uart_mes,sizeof(uart_mes),500);
 80008b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008b8:	2228      	movs	r2, #40	; 0x28
 80008ba:	4912      	ldr	r1, [pc, #72]	; (8000904 <Led_Task+0x60>)
 80008bc:	4812      	ldr	r0, [pc, #72]	; (8000908 <Led_Task+0x64>)
 80008be:	f001 fbfe 	bl	80020be <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {

	  //wait until we received notification event from the button_task
    if(xTaskNotifyWait(0,0,NULL,portMAX_DELAY)==pdTRUE)
 80008c2:	f04f 33ff 	mov.w	r3, #4294967295
 80008c6:	2200      	movs	r2, #0
 80008c8:	2100      	movs	r1, #0
 80008ca:	2000      	movs	r0, #0
 80008cc:	f002 fc42 	bl	8003154 <xTaskNotifyWait>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d1f5      	bne.n	80008c2 <Led_Task+0x1e>
    {

    	 HAL_Delay(300);
 80008d6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008da:	f000 f9d3 	bl	8000c84 <HAL_Delay>
    	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80008de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e2:	480a      	ldr	r0, [pc, #40]	; (800090c <Led_Task+0x68>)
 80008e4:	f000 fc89 	bl	80011fa <HAL_GPIO_TogglePin>
    	 sprintf(uart_mes,"\n Notification is received \r\n");
 80008e8:	4909      	ldr	r1, [pc, #36]	; (8000910 <Led_Task+0x6c>)
 80008ea:	4806      	ldr	r0, [pc, #24]	; (8000904 <Led_Task+0x60>)
 80008ec:	f003 f9de 	bl	8003cac <siprintf>
    	 HAL_UART_Transmit(&huart2, (uint8_t*)uart_mes,sizeof(uart_mes),500);
 80008f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008f4:	2228      	movs	r2, #40	; 0x28
 80008f6:	4903      	ldr	r1, [pc, #12]	; (8000904 <Led_Task+0x60>)
 80008f8:	4803      	ldr	r0, [pc, #12]	; (8000908 <Led_Task+0x64>)
 80008fa:	f001 fbe0 	bl	80020be <HAL_UART_Transmit>
    if(xTaskNotifyWait(0,0,NULL,portMAX_DELAY)==pdTRUE)
 80008fe:	e7e0      	b.n	80008c2 <Led_Task+0x1e>
 8000900:	080045a0 	.word	0x080045a0
 8000904:	2000404c 	.word	0x2000404c
 8000908:	20004074 	.word	0x20004074
 800090c:	40020c00 	.word	0x40020c00
 8000910:	080045bc 	.word	0x080045bc

08000914 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a04      	ldr	r2, [pc, #16]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d101      	bne.n	800092a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000926:	f000 f98d 	bl	8000c44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40010000 	.word	0x40010000

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	e7fe      	b.n	8000940 <Error_Handler+0x8>
	...

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <HAL_MspInit+0x54>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	4a11      	ldr	r2, [pc, #68]	; (8000998 <HAL_MspInit+0x54>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000958:	6453      	str	r3, [r2, #68]	; 0x44
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <HAL_MspInit+0x54>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <HAL_MspInit+0x54>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <HAL_MspInit+0x54>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	; 0x40
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_MspInit+0x54>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	210f      	movs	r1, #15
 8000986:	f06f 0001 	mvn.w	r0, #1
 800098a:	f000 fa57 	bl	8000e3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a19      	ldr	r2, [pc, #100]	; (8000a20 <HAL_UART_MspInit+0x84>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d12b      	bne.n	8000a16 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009cc:	6413      	str	r3, [r2, #64]	; 0x40
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a10      	ldr	r2, [pc, #64]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009f6:	230c      	movs	r3, #12
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a06:	2307      	movs	r3, #7
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <HAL_UART_MspInit+0x8c>)
 8000a12:	f000 fa3d 	bl	8000e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a16:	bf00      	nop
 8000a18:	3728      	adds	r7, #40	; 0x28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40004400 	.word	0x40004400
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020000 	.word	0x40020000

08000a2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08c      	sub	sp, #48	; 0x30
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	2019      	movs	r0, #25
 8000a42:	f000 f9fb 	bl	8000e3c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a46:	2019      	movs	r0, #25
 8000a48:	f000 fa14 	bl	8000e74 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <HAL_InitTick+0xa0>)
 8000a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a54:	4a1d      	ldr	r2, [pc, #116]	; (8000acc <HAL_InitTick+0xa0>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <HAL_InitTick+0xa0>)
 8000a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a68:	f107 0210 	add.w	r2, r7, #16
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4611      	mov	r1, r2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 f824 	bl	8001ac0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a78:	f001 f80e 	bl	8001a98 <HAL_RCC_GetPCLK2Freq>
 8000a7c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a80:	4a13      	ldr	r2, [pc, #76]	; (8000ad0 <HAL_InitTick+0xa4>)
 8000a82:	fba2 2303 	umull	r2, r3, r2, r3
 8000a86:	0c9b      	lsrs	r3, r3, #18
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <HAL_InitTick+0xa8>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <HAL_InitTick+0xac>)
 8000a90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <HAL_InitTick+0xa8>)
 8000a94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a98:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <HAL_InitTick+0xa8>)
 8000a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a9e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <HAL_InitTick+0xa8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <HAL_InitTick+0xa8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000aac:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <HAL_InitTick+0xa8>)
 8000aae:	f001 f839 	bl	8001b24 <HAL_TIM_Base_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d104      	bne.n	8000ac2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ab8:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <HAL_InitTick+0xa8>)
 8000aba:	f001 f88d 	bl	8001bd8 <HAL_TIM_Base_Start_IT>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	e000      	b.n	8000ac4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3730      	adds	r7, #48	; 0x30
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	431bde83 	.word	0x431bde83
 8000ad4:	200040b8 	.word	0x200040b8
 8000ad8:	40010000 	.word	0x40010000

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <NMI_Handler+0x4>

08000ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <HardFault_Handler+0x4>

08000ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <MemManage_Handler+0x4>

08000aee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <BusFault_Handler+0x4>

08000af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <UsageFault_Handler+0x4>

08000afa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b0c:	4802      	ldr	r0, [pc, #8]	; (8000b18 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b0e:	f001 f8c5 	bl	8001c9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200040b8 	.word	0x200040b8

08000b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b24:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <_sbrk+0x5c>)
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <_sbrk+0x60>)
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b30:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d102      	bne.n	8000b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <_sbrk+0x64>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <_sbrk+0x68>)
 8000b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <_sbrk+0x64>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d207      	bcs.n	8000b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b4c:	f003 f86e 	bl	8003c2c <__errno>
 8000b50:	4603      	mov	r3, r0
 8000b52:	220c      	movs	r2, #12
 8000b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5a:	e009      	b.n	8000b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b62:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <_sbrk+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <_sbrk+0x64>)
 8000b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20020000 	.word	0x20020000
 8000b7c:	00000400 	.word	0x00000400
 8000b80:	200002e4 	.word	0x200002e4
 8000b84:	20004118 	.word	0x20004118

08000b88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <SystemInit+0x20>)
 8000b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <SystemInit+0x20>)
 8000b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb0:	480d      	ldr	r0, [pc, #52]	; (8000be8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bb2:	490e      	ldr	r1, [pc, #56]	; (8000bec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bb4:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bc8:	4c0b      	ldr	r4, [pc, #44]	; (8000bf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bd6:	f7ff ffd7 	bl	8000b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bda:	f003 f82d 	bl	8003c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bde:	f7ff fce5 	bl	80005ac <main>
  bx  lr    
 8000be2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000be4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000bf0:	08004640 	.word	0x08004640
  ldr r2, =_sbss
 8000bf4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000bf8:	20004114 	.word	0x20004114

08000bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC_IRQHandler>
	...

08000c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <HAL_Init+0x40>)
 8000c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_Init+0x40>)
 8000c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <HAL_Init+0x40>)
 8000c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 f8fc 	bl	8000e26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f7ff fefc 	bl	8000a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c34:	f7ff fe86 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023c00 	.word	0x40023c00

08000c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_IncTick+0x20>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x24>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <HAL_IncTick+0x24>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20004100 	.word	0x20004100

08000c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <HAL_GetTick+0x14>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20004100 	.word	0x20004100

08000c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c8c:	f7ff ffee 	bl	8000c6c <HAL_GetTick>
 8000c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c9c:	d005      	beq.n	8000caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_Delay+0x44>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000caa:	bf00      	nop
 8000cac:	f7ff ffde 	bl	8000c6c <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d8f7      	bhi.n	8000cac <HAL_Delay+0x28>
  {
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008

08000ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfe:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	60d3      	str	r3, [r2, #12]
}
 8000d04:	bf00      	nop
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <__NVIC_GetPriorityGrouping+0x18>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	f003 0307 	and.w	r3, r3, #7
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	db0b      	blt.n	8000d5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	f003 021f 	and.w	r2, r3, #31
 8000d48:	4907      	ldr	r1, [pc, #28]	; (8000d68 <__NVIC_EnableIRQ+0x38>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	095b      	lsrs	r3, r3, #5
 8000d50:	2001      	movs	r0, #1
 8000d52:	fa00 f202 	lsl.w	r2, r0, r2
 8000d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000e100 	.word	0xe000e100

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	db0a      	blt.n	8000d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	490c      	ldr	r1, [pc, #48]	; (8000db8 <__NVIC_SetPriority+0x4c>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	0112      	lsls	r2, r2, #4
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	440b      	add	r3, r1
 8000d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d94:	e00a      	b.n	8000dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4908      	ldr	r1, [pc, #32]	; (8000dbc <__NVIC_SetPriority+0x50>)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	3b04      	subs	r3, #4
 8000da4:	0112      	lsls	r2, r2, #4
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	440b      	add	r3, r1
 8000daa:	761a      	strb	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000e100 	.word	0xe000e100
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	; 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f1c3 0307 	rsb	r3, r3, #7
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	bf28      	it	cs
 8000dde:	2304      	movcs	r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3304      	adds	r3, #4
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d902      	bls.n	8000df0 <NVIC_EncodePriority+0x30>
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3b03      	subs	r3, #3
 8000dee:	e000      	b.n	8000df2 <NVIC_EncodePriority+0x32>
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	401a      	ands	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e08:	f04f 31ff 	mov.w	r1, #4294967295
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43d9      	mvns	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	4313      	orrs	r3, r2
         );
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3724      	adds	r7, #36	; 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ff4c 	bl	8000ccc <__NVIC_SetPriorityGrouping>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
 8000e48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4e:	f7ff ff61 	bl	8000d14 <__NVIC_GetPriorityGrouping>
 8000e52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	68b9      	ldr	r1, [r7, #8]
 8000e58:	6978      	ldr	r0, [r7, #20]
 8000e5a:	f7ff ffb1 	bl	8000dc0 <NVIC_EncodePriority>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff80 	bl	8000d6c <__NVIC_SetPriority>
}
 8000e6c:	bf00      	nop
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff54 	bl	8000d30 <__NVIC_EnableIRQ>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	; 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
 8000eaa:	e159      	b.n	8001160 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eac:	2201      	movs	r2, #1
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	f040 8148 	bne.w	800115a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d005      	beq.n	8000ee2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d130      	bne.n	8000f44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	2203      	movs	r2, #3
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	68da      	ldr	r2, [r3, #12]
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f18:	2201      	movs	r2, #1
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	091b      	lsrs	r3, r3, #4
 8000f2e:	f003 0201 	and.w	r2, r3, #1
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	2b03      	cmp	r3, #3
 8000f4e:	d017      	beq.n	8000f80 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d123      	bne.n	8000fd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	08da      	lsrs	r2, r3, #3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3208      	adds	r2, #8
 8000f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	f003 0307 	and.w	r3, r3, #7
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	220f      	movs	r2, #15
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	691a      	ldr	r2, [r3, #16]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	08da      	lsrs	r2, r3, #3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3208      	adds	r2, #8
 8000fce:	69b9      	ldr	r1, [r7, #24]
 8000fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2203      	movs	r2, #3
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0203 	and.w	r2, r3, #3
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001010:	2b00      	cmp	r3, #0
 8001012:	f000 80a2 	beq.w	800115a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b57      	ldr	r3, [pc, #348]	; (8001178 <HAL_GPIO_Init+0x2e8>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	4a56      	ldr	r2, [pc, #344]	; (8001178 <HAL_GPIO_Init+0x2e8>)
 8001020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001024:	6453      	str	r3, [r2, #68]	; 0x44
 8001026:	4b54      	ldr	r3, [pc, #336]	; (8001178 <HAL_GPIO_Init+0x2e8>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001032:	4a52      	ldr	r2, [pc, #328]	; (800117c <HAL_GPIO_Init+0x2ec>)
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	089b      	lsrs	r3, r3, #2
 8001038:	3302      	adds	r3, #2
 800103a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	220f      	movs	r2, #15
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a49      	ldr	r2, [pc, #292]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d019      	beq.n	8001092 <HAL_GPIO_Init+0x202>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a48      	ldr	r2, [pc, #288]	; (8001184 <HAL_GPIO_Init+0x2f4>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d013      	beq.n	800108e <HAL_GPIO_Init+0x1fe>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a47      	ldr	r2, [pc, #284]	; (8001188 <HAL_GPIO_Init+0x2f8>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d00d      	beq.n	800108a <HAL_GPIO_Init+0x1fa>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a46      	ldr	r2, [pc, #280]	; (800118c <HAL_GPIO_Init+0x2fc>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d007      	beq.n	8001086 <HAL_GPIO_Init+0x1f6>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a45      	ldr	r2, [pc, #276]	; (8001190 <HAL_GPIO_Init+0x300>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d101      	bne.n	8001082 <HAL_GPIO_Init+0x1f2>
 800107e:	2304      	movs	r3, #4
 8001080:	e008      	b.n	8001094 <HAL_GPIO_Init+0x204>
 8001082:	2307      	movs	r3, #7
 8001084:	e006      	b.n	8001094 <HAL_GPIO_Init+0x204>
 8001086:	2303      	movs	r3, #3
 8001088:	e004      	b.n	8001094 <HAL_GPIO_Init+0x204>
 800108a:	2302      	movs	r3, #2
 800108c:	e002      	b.n	8001094 <HAL_GPIO_Init+0x204>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <HAL_GPIO_Init+0x204>
 8001092:	2300      	movs	r3, #0
 8001094:	69fa      	ldr	r2, [r7, #28]
 8001096:	f002 0203 	and.w	r2, r2, #3
 800109a:	0092      	lsls	r2, r2, #2
 800109c:	4093      	lsls	r3, r2
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a4:	4935      	ldr	r1, [pc, #212]	; (800117c <HAL_GPIO_Init+0x2ec>)
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	3302      	adds	r3, #2
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b2:	4b38      	ldr	r3, [pc, #224]	; (8001194 <HAL_GPIO_Init+0x304>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010d6:	4a2f      	ldr	r2, [pc, #188]	; (8001194 <HAL_GPIO_Init+0x304>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010dc:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <HAL_GPIO_Init+0x304>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001100:	4a24      	ldr	r2, [pc, #144]	; (8001194 <HAL_GPIO_Init+0x304>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001106:	4b23      	ldr	r3, [pc, #140]	; (8001194 <HAL_GPIO_Init+0x304>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800112a:	4a1a      	ldr	r2, [pc, #104]	; (8001194 <HAL_GPIO_Init+0x304>)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <HAL_GPIO_Init+0x304>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001154:	4a0f      	ldr	r2, [pc, #60]	; (8001194 <HAL_GPIO_Init+0x304>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3301      	adds	r3, #1
 800115e:	61fb      	str	r3, [r7, #28]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	2b0f      	cmp	r3, #15
 8001164:	f67f aea2 	bls.w	8000eac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40013800 	.word	0x40013800
 8001180:	40020000 	.word	0x40020000
 8001184:	40020400 	.word	0x40020400
 8001188:	40020800 	.word	0x40020800
 800118c:	40020c00 	.word	0x40020c00
 8001190:	40021000 	.word	0x40021000
 8001194:	40013c00 	.word	0x40013c00

08001198 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	691a      	ldr	r2, [r3, #16]
 80011a8:	887b      	ldrh	r3, [r7, #2]
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d002      	beq.n	80011b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011b0:	2301      	movs	r3, #1
 80011b2:	73fb      	strb	r3, [r7, #15]
 80011b4:	e001      	b.n	80011ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]
 80011d4:	4613      	mov	r3, r2
 80011d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011d8:	787b      	ldrb	r3, [r7, #1]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011de:	887a      	ldrh	r2, [r7, #2]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011e4:	e003      	b.n	80011ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011e6:	887b      	ldrh	r3, [r7, #2]
 80011e8:	041a      	lsls	r2, r3, #16
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	619a      	str	r2, [r3, #24]
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b085      	sub	sp, #20
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	460b      	mov	r3, r1
 8001204:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800120c:	887a      	ldrh	r2, [r7, #2]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4013      	ands	r3, r2
 8001212:	041a      	lsls	r2, r3, #16
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43d9      	mvns	r1, r3
 8001218:	887b      	ldrh	r3, [r7, #2]
 800121a:	400b      	ands	r3, r1
 800121c:	431a      	orrs	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	619a      	str	r2, [r3, #24]
}
 8001222:	bf00      	nop
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
	...

08001230 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e264      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	2b00      	cmp	r3, #0
 800124c:	d075      	beq.n	800133a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800124e:	4ba3      	ldr	r3, [pc, #652]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 030c 	and.w	r3, r3, #12
 8001256:	2b04      	cmp	r3, #4
 8001258:	d00c      	beq.n	8001274 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800125a:	4ba0      	ldr	r3, [pc, #640]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001262:	2b08      	cmp	r3, #8
 8001264:	d112      	bne.n	800128c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001266:	4b9d      	ldr	r3, [pc, #628]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800126e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001272:	d10b      	bne.n	800128c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	4b99      	ldr	r3, [pc, #612]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d05b      	beq.n	8001338 <HAL_RCC_OscConfig+0x108>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d157      	bne.n	8001338 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e23f      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001294:	d106      	bne.n	80012a4 <HAL_RCC_OscConfig+0x74>
 8001296:	4b91      	ldr	r3, [pc, #580]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a90      	ldr	r2, [pc, #576]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 800129c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e01d      	b.n	80012e0 <HAL_RCC_OscConfig+0xb0>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012ac:	d10c      	bne.n	80012c8 <HAL_RCC_OscConfig+0x98>
 80012ae:	4b8b      	ldr	r3, [pc, #556]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a8a      	ldr	r2, [pc, #552]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	4b88      	ldr	r3, [pc, #544]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a87      	ldr	r2, [pc, #540]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80012c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e00b      	b.n	80012e0 <HAL_RCC_OscConfig+0xb0>
 80012c8:	4b84      	ldr	r3, [pc, #528]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a83      	ldr	r2, [pc, #524]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80012ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b81      	ldr	r3, [pc, #516]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a80      	ldr	r2, [pc, #512]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80012da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d013      	beq.n	8001310 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fcc0 	bl	8000c6c <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fcbc 	bl	8000c6c <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e204      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	4b76      	ldr	r3, [pc, #472]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0xc0>
 800130e:	e014      	b.n	800133a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7ff fcac 	bl	8000c6c <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001318:	f7ff fca8 	bl	8000c6c <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	; 0x64
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e1f0      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132a:	4b6c      	ldr	r3, [pc, #432]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0xe8>
 8001336:	e000      	b.n	800133a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d063      	beq.n	800140e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001346:	4b65      	ldr	r3, [pc, #404]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 030c 	and.w	r3, r3, #12
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00b      	beq.n	800136a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001352:	4b62      	ldr	r3, [pc, #392]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800135a:	2b08      	cmp	r3, #8
 800135c:	d11c      	bne.n	8001398 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800135e:	4b5f      	ldr	r3, [pc, #380]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d116      	bne.n	8001398 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136a:	4b5c      	ldr	r3, [pc, #368]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d005      	beq.n	8001382 <HAL_RCC_OscConfig+0x152>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d001      	beq.n	8001382 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e1c4      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001382:	4b56      	ldr	r3, [pc, #344]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4952      	ldr	r1, [pc, #328]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001392:	4313      	orrs	r3, r2
 8001394:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001396:	e03a      	b.n	800140e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d020      	beq.n	80013e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a0:	4b4f      	ldr	r3, [pc, #316]	; (80014e0 <HAL_RCC_OscConfig+0x2b0>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a6:	f7ff fc61 	bl	8000c6c <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ae:	f7ff fc5d 	bl	8000c6c <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e1a5      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c0:	4b46      	ldr	r3, [pc, #280]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013cc:	4b43      	ldr	r3, [pc, #268]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	4940      	ldr	r1, [pc, #256]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	600b      	str	r3, [r1, #0]
 80013e0:	e015      	b.n	800140e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e2:	4b3f      	ldr	r3, [pc, #252]	; (80014e0 <HAL_RCC_OscConfig+0x2b0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e8:	f7ff fc40 	bl	8000c6c <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f0:	f7ff fc3c 	bl	8000c6c <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e184      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001402:	4b36      	ldr	r3, [pc, #216]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	2b00      	cmp	r3, #0
 8001418:	d030      	beq.n	800147c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d016      	beq.n	8001450 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001422:	4b30      	ldr	r3, [pc, #192]	; (80014e4 <HAL_RCC_OscConfig+0x2b4>)
 8001424:	2201      	movs	r2, #1
 8001426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001428:	f7ff fc20 	bl	8000c6c <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001430:	f7ff fc1c 	bl	8000c6c <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e164      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f0      	beq.n	8001430 <HAL_RCC_OscConfig+0x200>
 800144e:	e015      	b.n	800147c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001450:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <HAL_RCC_OscConfig+0x2b4>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001456:	f7ff fc09 	bl	8000c6c <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800145e:	f7ff fc05 	bl	8000c6c <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e14d      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001470:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f0      	bne.n	800145e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 80a0 	beq.w	80015ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800148e:	4b13      	ldr	r3, [pc, #76]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10f      	bne.n	80014ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <HAL_RCC_OscConfig+0x2ac>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014b6:	2301      	movs	r3, #1
 80014b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <HAL_RCC_OscConfig+0x2b8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d121      	bne.n	800150a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <HAL_RCC_OscConfig+0x2b8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <HAL_RCC_OscConfig+0x2b8>)
 80014cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014d2:	f7ff fbcb 	bl	8000c6c <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d8:	e011      	b.n	80014fe <HAL_RCC_OscConfig+0x2ce>
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	42470000 	.word	0x42470000
 80014e4:	42470e80 	.word	0x42470e80
 80014e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ec:	f7ff fbbe 	bl	8000c6c <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e106      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fe:	4b85      	ldr	r3, [pc, #532]	; (8001714 <HAL_RCC_OscConfig+0x4e4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d106      	bne.n	8001520 <HAL_RCC_OscConfig+0x2f0>
 8001512:	4b81      	ldr	r3, [pc, #516]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 8001514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001516:	4a80      	ldr	r2, [pc, #512]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6713      	str	r3, [r2, #112]	; 0x70
 800151e:	e01c      	b.n	800155a <HAL_RCC_OscConfig+0x32a>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b05      	cmp	r3, #5
 8001526:	d10c      	bne.n	8001542 <HAL_RCC_OscConfig+0x312>
 8001528:	4b7b      	ldr	r3, [pc, #492]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 800152a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152c:	4a7a      	ldr	r2, [pc, #488]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	6713      	str	r3, [r2, #112]	; 0x70
 8001534:	4b78      	ldr	r3, [pc, #480]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 8001536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001538:	4a77      	ldr	r2, [pc, #476]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6713      	str	r3, [r2, #112]	; 0x70
 8001540:	e00b      	b.n	800155a <HAL_RCC_OscConfig+0x32a>
 8001542:	4b75      	ldr	r3, [pc, #468]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 8001544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001546:	4a74      	ldr	r2, [pc, #464]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 8001548:	f023 0301 	bic.w	r3, r3, #1
 800154c:	6713      	str	r3, [r2, #112]	; 0x70
 800154e:	4b72      	ldr	r3, [pc, #456]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 8001550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001552:	4a71      	ldr	r2, [pc, #452]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 8001554:	f023 0304 	bic.w	r3, r3, #4
 8001558:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d015      	beq.n	800158e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001562:	f7ff fb83 	bl	8000c6c <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001568:	e00a      	b.n	8001580 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156a:	f7ff fb7f 	bl	8000c6c <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	f241 3288 	movw	r2, #5000	; 0x1388
 8001578:	4293      	cmp	r3, r2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e0c5      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001580:	4b65      	ldr	r3, [pc, #404]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 8001582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0ee      	beq.n	800156a <HAL_RCC_OscConfig+0x33a>
 800158c:	e014      	b.n	80015b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158e:	f7ff fb6d 	bl	8000c6c <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001594:	e00a      	b.n	80015ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001596:	f7ff fb69 	bl	8000c6c <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e0af      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ac:	4b5a      	ldr	r3, [pc, #360]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 80015ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1ee      	bne.n	8001596 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015b8:	7dfb      	ldrb	r3, [r7, #23]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d105      	bne.n	80015ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015be:	4b56      	ldr	r3, [pc, #344]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a55      	ldr	r2, [pc, #340]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 80015c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 809b 	beq.w	800170a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015d4:	4b50      	ldr	r3, [pc, #320]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 030c 	and.w	r3, r3, #12
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d05c      	beq.n	800169a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d141      	bne.n	800166c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e8:	4b4c      	ldr	r3, [pc, #304]	; (800171c <HAL_RCC_OscConfig+0x4ec>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ee:	f7ff fb3d 	bl	8000c6c <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f6:	f7ff fb39 	bl	8000c6c <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e081      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001608:	4b43      	ldr	r3, [pc, #268]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f0      	bne.n	80015f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69da      	ldr	r2, [r3, #28]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	431a      	orrs	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	019b      	lsls	r3, r3, #6
 8001624:	431a      	orrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162a:	085b      	lsrs	r3, r3, #1
 800162c:	3b01      	subs	r3, #1
 800162e:	041b      	lsls	r3, r3, #16
 8001630:	431a      	orrs	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001636:	061b      	lsls	r3, r3, #24
 8001638:	4937      	ldr	r1, [pc, #220]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 800163a:	4313      	orrs	r3, r2
 800163c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800163e:	4b37      	ldr	r3, [pc, #220]	; (800171c <HAL_RCC_OscConfig+0x4ec>)
 8001640:	2201      	movs	r2, #1
 8001642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fb12 	bl	8000c6c <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164c:	f7ff fb0e 	bl	8000c6c <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e056      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165e:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f0      	beq.n	800164c <HAL_RCC_OscConfig+0x41c>
 800166a:	e04e      	b.n	800170a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166c:	4b2b      	ldr	r3, [pc, #172]	; (800171c <HAL_RCC_OscConfig+0x4ec>)
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001672:	f7ff fafb 	bl	8000c6c <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167a:	f7ff faf7 	bl	8000c6c <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e03f      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168c:	4b22      	ldr	r3, [pc, #136]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f0      	bne.n	800167a <HAL_RCC_OscConfig+0x44a>
 8001698:	e037      	b.n	800170a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d101      	bne.n	80016a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e032      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016a6:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <HAL_RCC_OscConfig+0x4e8>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d028      	beq.n	8001706 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016be:	429a      	cmp	r2, r3
 80016c0:	d121      	bne.n	8001706 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d11a      	bne.n	8001706 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016d6:	4013      	ands	r3, r2
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016dc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016de:	4293      	cmp	r3, r2
 80016e0:	d111      	bne.n	8001706 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	085b      	lsrs	r3, r3, #1
 80016ee:	3b01      	subs	r3, #1
 80016f0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d107      	bne.n	8001706 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001702:	429a      	cmp	r2, r3
 8001704:	d001      	beq.n	800170a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e000      	b.n	800170c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40007000 	.word	0x40007000
 8001718:	40023800 	.word	0x40023800
 800171c:	42470060 	.word	0x42470060

08001720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0cc      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001734:	4b68      	ldr	r3, [pc, #416]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d90c      	bls.n	800175c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001742:	4b65      	ldr	r3, [pc, #404]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174a:	4b63      	ldr	r3, [pc, #396]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e0b8      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d020      	beq.n	80017aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001774:	4b59      	ldr	r3, [pc, #356]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	4a58      	ldr	r2, [pc, #352]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800177e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0308 	and.w	r3, r3, #8
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800178c:	4b53      	ldr	r3, [pc, #332]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	4a52      	ldr	r2, [pc, #328]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001798:	4b50      	ldr	r3, [pc, #320]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	494d      	ldr	r1, [pc, #308]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d044      	beq.n	8001840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d107      	bne.n	80017ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017be:	4b47      	ldr	r3, [pc, #284]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d119      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e07f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d003      	beq.n	80017de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d107      	bne.n	80017ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017de:	4b3f      	ldr	r3, [pc, #252]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d109      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e06f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ee:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e067      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017fe:	4b37      	ldr	r3, [pc, #220]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f023 0203 	bic.w	r2, r3, #3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	4934      	ldr	r1, [pc, #208]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	4313      	orrs	r3, r2
 800180e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001810:	f7ff fa2c 	bl	8000c6c <HAL_GetTick>
 8001814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001816:	e00a      	b.n	800182e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001818:	f7ff fa28 	bl	8000c6c <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	f241 3288 	movw	r2, #5000	; 0x1388
 8001826:	4293      	cmp	r3, r2
 8001828:	d901      	bls.n	800182e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e04f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182e:	4b2b      	ldr	r3, [pc, #172]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 020c 	and.w	r2, r3, #12
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	429a      	cmp	r2, r3
 800183e:	d1eb      	bne.n	8001818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001840:	4b25      	ldr	r3, [pc, #148]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d20c      	bcs.n	8001868 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184e:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e032      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d008      	beq.n	8001886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001874:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	4916      	ldr	r1, [pc, #88]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	4313      	orrs	r3, r2
 8001884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d009      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001892:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	490e      	ldr	r1, [pc, #56]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018a6:	f000 f821 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 80018aa:	4602      	mov	r2, r0
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	091b      	lsrs	r3, r3, #4
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	490a      	ldr	r1, [pc, #40]	; (80018e0 <HAL_RCC_ClockConfig+0x1c0>)
 80018b8:	5ccb      	ldrb	r3, [r1, r3]
 80018ba:	fa22 f303 	lsr.w	r3, r2, r3
 80018be:	4a09      	ldr	r2, [pc, #36]	; (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff f8b0 	bl	8000a2c <HAL_InitTick>

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40023c00 	.word	0x40023c00
 80018dc:	40023800 	.word	0x40023800
 80018e0:	080045e4 	.word	0x080045e4
 80018e4:	20000000 	.word	0x20000000
 80018e8:	20000004 	.word	0x20000004

080018ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ec:	b5b0      	push	{r4, r5, r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018f2:	2100      	movs	r1, #0
 80018f4:	6079      	str	r1, [r7, #4]
 80018f6:	2100      	movs	r1, #0
 80018f8:	60f9      	str	r1, [r7, #12]
 80018fa:	2100      	movs	r1, #0
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018fe:	2100      	movs	r1, #0
 8001900:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001902:	4952      	ldr	r1, [pc, #328]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x160>)
 8001904:	6889      	ldr	r1, [r1, #8]
 8001906:	f001 010c 	and.w	r1, r1, #12
 800190a:	2908      	cmp	r1, #8
 800190c:	d00d      	beq.n	800192a <HAL_RCC_GetSysClockFreq+0x3e>
 800190e:	2908      	cmp	r1, #8
 8001910:	f200 8094 	bhi.w	8001a3c <HAL_RCC_GetSysClockFreq+0x150>
 8001914:	2900      	cmp	r1, #0
 8001916:	d002      	beq.n	800191e <HAL_RCC_GetSysClockFreq+0x32>
 8001918:	2904      	cmp	r1, #4
 800191a:	d003      	beq.n	8001924 <HAL_RCC_GetSysClockFreq+0x38>
 800191c:	e08e      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800191e:	4b4c      	ldr	r3, [pc, #304]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x164>)
 8001920:	60bb      	str	r3, [r7, #8]
       break;
 8001922:	e08e      	b.n	8001a42 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001924:	4b4b      	ldr	r3, [pc, #300]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x168>)
 8001926:	60bb      	str	r3, [r7, #8]
      break;
 8001928:	e08b      	b.n	8001a42 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800192a:	4948      	ldr	r1, [pc, #288]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x160>)
 800192c:	6849      	ldr	r1, [r1, #4]
 800192e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001932:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001934:	4945      	ldr	r1, [pc, #276]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x160>)
 8001936:	6849      	ldr	r1, [r1, #4]
 8001938:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800193c:	2900      	cmp	r1, #0
 800193e:	d024      	beq.n	800198a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001940:	4942      	ldr	r1, [pc, #264]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x160>)
 8001942:	6849      	ldr	r1, [r1, #4]
 8001944:	0989      	lsrs	r1, r1, #6
 8001946:	4608      	mov	r0, r1
 8001948:	f04f 0100 	mov.w	r1, #0
 800194c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001950:	f04f 0500 	mov.w	r5, #0
 8001954:	ea00 0204 	and.w	r2, r0, r4
 8001958:	ea01 0305 	and.w	r3, r1, r5
 800195c:	493d      	ldr	r1, [pc, #244]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x168>)
 800195e:	fb01 f003 	mul.w	r0, r1, r3
 8001962:	2100      	movs	r1, #0
 8001964:	fb01 f102 	mul.w	r1, r1, r2
 8001968:	1844      	adds	r4, r0, r1
 800196a:	493a      	ldr	r1, [pc, #232]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x168>)
 800196c:	fba2 0101 	umull	r0, r1, r2, r1
 8001970:	1863      	adds	r3, r4, r1
 8001972:	4619      	mov	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	461a      	mov	r2, r3
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	f7fe fc80 	bl	8000280 <__aeabi_uldivmod>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4613      	mov	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	e04a      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198a:	4b30      	ldr	r3, [pc, #192]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x160>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	099b      	lsrs	r3, r3, #6
 8001990:	461a      	mov	r2, r3
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	f240 10ff 	movw	r0, #511	; 0x1ff
 800199a:	f04f 0100 	mov.w	r1, #0
 800199e:	ea02 0400 	and.w	r4, r2, r0
 80019a2:	ea03 0501 	and.w	r5, r3, r1
 80019a6:	4620      	mov	r0, r4
 80019a8:	4629      	mov	r1, r5
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	014b      	lsls	r3, r1, #5
 80019b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019b8:	0142      	lsls	r2, r0, #5
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	1b00      	subs	r0, r0, r4
 80019c0:	eb61 0105 	sbc.w	r1, r1, r5
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	018b      	lsls	r3, r1, #6
 80019ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019d2:	0182      	lsls	r2, r0, #6
 80019d4:	1a12      	subs	r2, r2, r0
 80019d6:	eb63 0301 	sbc.w	r3, r3, r1
 80019da:	f04f 0000 	mov.w	r0, #0
 80019de:	f04f 0100 	mov.w	r1, #0
 80019e2:	00d9      	lsls	r1, r3, #3
 80019e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019e8:	00d0      	lsls	r0, r2, #3
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	1912      	adds	r2, r2, r4
 80019f0:	eb45 0303 	adc.w	r3, r5, r3
 80019f4:	f04f 0000 	mov.w	r0, #0
 80019f8:	f04f 0100 	mov.w	r1, #0
 80019fc:	0299      	lsls	r1, r3, #10
 80019fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a02:	0290      	lsls	r0, r2, #10
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	f7fe fc34 	bl	8000280 <__aeabi_uldivmod>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a20:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x160>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	0c1b      	lsrs	r3, r3, #16
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a38:	60bb      	str	r3, [r7, #8]
      break;
 8001a3a:	e002      	b.n	8001a42 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x164>)
 8001a3e:	60bb      	str	r3, [r7, #8]
      break;
 8001a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a42:	68bb      	ldr	r3, [r7, #8]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	00f42400 	.word	0x00f42400
 8001a54:	017d7840 	.word	0x017d7840

08001a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a5c:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	20000000 	.word	0x20000000

08001a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a74:	f7ff fff0 	bl	8001a58 <HAL_RCC_GetHCLKFreq>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	0a9b      	lsrs	r3, r3, #10
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	4903      	ldr	r1, [pc, #12]	; (8001a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a86:	5ccb      	ldrb	r3, [r1, r3]
 8001a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40023800 	.word	0x40023800
 8001a94:	080045f4 	.word	0x080045f4

08001a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a9c:	f7ff ffdc 	bl	8001a58 <HAL_RCC_GetHCLKFreq>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	0b5b      	lsrs	r3, r3, #13
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	4903      	ldr	r1, [pc, #12]	; (8001abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aae:	5ccb      	ldrb	r3, [r1, r3]
 8001ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	080045f4 	.word	0x080045f4

08001ac0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	220f      	movs	r2, #15
 8001ace:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_RCC_GetClockConfig+0x5c>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 0203 	and.w	r2, r3, #3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001adc:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <HAL_RCC_GetClockConfig+0x5c>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <HAL_RCC_GetClockConfig+0x5c>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001af4:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_RCC_GetClockConfig+0x5c>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	08db      	lsrs	r3, r3, #3
 8001afa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <HAL_RCC_GetClockConfig+0x60>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0207 	and.w	r2, r3, #7
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	601a      	str	r2, [r3, #0]
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40023c00 	.word	0x40023c00

08001b24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e041      	b.n	8001bba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d106      	bne.n	8001b50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f839 	bl	8001bc2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2202      	movs	r2, #2
 8001b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3304      	adds	r3, #4
 8001b60:	4619      	mov	r1, r3
 8001b62:	4610      	mov	r0, r2
 8001b64:	f000 f9ca 	bl	8001efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d001      	beq.n	8001bf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e044      	b.n	8001c7a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0201 	orr.w	r2, r2, #1
 8001c06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1e      	ldr	r2, [pc, #120]	; (8001c88 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d018      	beq.n	8001c44 <HAL_TIM_Base_Start_IT+0x6c>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c1a:	d013      	beq.n	8001c44 <HAL_TIM_Base_Start_IT+0x6c>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a1a      	ldr	r2, [pc, #104]	; (8001c8c <HAL_TIM_Base_Start_IT+0xb4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d00e      	beq.n	8001c44 <HAL_TIM_Base_Start_IT+0x6c>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a19      	ldr	r2, [pc, #100]	; (8001c90 <HAL_TIM_Base_Start_IT+0xb8>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d009      	beq.n	8001c44 <HAL_TIM_Base_Start_IT+0x6c>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a17      	ldr	r2, [pc, #92]	; (8001c94 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d004      	beq.n	8001c44 <HAL_TIM_Base_Start_IT+0x6c>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a16      	ldr	r2, [pc, #88]	; (8001c98 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d111      	bne.n	8001c68 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b06      	cmp	r3, #6
 8001c54:	d010      	beq.n	8001c78 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 0201 	orr.w	r2, r2, #1
 8001c64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c66:	e007      	b.n	8001c78 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40010000 	.word	0x40010000
 8001c8c:	40000400 	.word	0x40000400
 8001c90:	40000800 	.word	0x40000800
 8001c94:	40000c00 	.word	0x40000c00
 8001c98:	40014000 	.word	0x40014000

08001c9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d122      	bne.n	8001cf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d11b      	bne.n	8001cf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f06f 0202 	mvn.w	r2, #2
 8001cc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f8ee 	bl	8001ec0 <HAL_TIM_IC_CaptureCallback>
 8001ce4:	e005      	b.n	8001cf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f8e0 	bl	8001eac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f8f1 	bl	8001ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d122      	bne.n	8001d4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d11b      	bne.n	8001d4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f06f 0204 	mvn.w	r2, #4
 8001d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2202      	movs	r2, #2
 8001d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f8c4 	bl	8001ec0 <HAL_TIM_IC_CaptureCallback>
 8001d38:	e005      	b.n	8001d46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f8b6 	bl	8001eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f8c7 	bl	8001ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d122      	bne.n	8001da0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d11b      	bne.n	8001da0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f06f 0208 	mvn.w	r2, #8
 8001d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2204      	movs	r2, #4
 8001d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f89a 	bl	8001ec0 <HAL_TIM_IC_CaptureCallback>
 8001d8c:	e005      	b.n	8001d9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f88c 	bl	8001eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f89d 	bl	8001ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	f003 0310 	and.w	r3, r3, #16
 8001daa:	2b10      	cmp	r3, #16
 8001dac:	d122      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	f003 0310 	and.w	r3, r3, #16
 8001db8:	2b10      	cmp	r3, #16
 8001dba:	d11b      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f06f 0210 	mvn.w	r2, #16
 8001dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2208      	movs	r2, #8
 8001dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f870 	bl	8001ec0 <HAL_TIM_IC_CaptureCallback>
 8001de0:	e005      	b.n	8001dee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f862 	bl	8001eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f873 	bl	8001ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d10e      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d107      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0201 	mvn.w	r2, #1
 8001e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7fe fd7a 	bl	8000914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2a:	2b80      	cmp	r3, #128	; 0x80
 8001e2c:	d10e      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e38:	2b80      	cmp	r3, #128	; 0x80
 8001e3a:	d107      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f8e2 	bl	8002010 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e56:	2b40      	cmp	r3, #64	; 0x40
 8001e58:	d10e      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e64:	2b40      	cmp	r3, #64	; 0x40
 8001e66:	d107      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f838 	bl	8001ee8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	f003 0320 	and.w	r3, r3, #32
 8001e82:	2b20      	cmp	r3, #32
 8001e84:	d10e      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f003 0320 	and.w	r3, r3, #32
 8001e90:	2b20      	cmp	r3, #32
 8001e92:	d107      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0220 	mvn.w	r2, #32
 8001e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f8ac 	bl	8001ffc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a34      	ldr	r2, [pc, #208]	; (8001fe0 <TIM_Base_SetConfig+0xe4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d00f      	beq.n	8001f34 <TIM_Base_SetConfig+0x38>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f1a:	d00b      	beq.n	8001f34 <TIM_Base_SetConfig+0x38>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a31      	ldr	r2, [pc, #196]	; (8001fe4 <TIM_Base_SetConfig+0xe8>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d007      	beq.n	8001f34 <TIM_Base_SetConfig+0x38>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a30      	ldr	r2, [pc, #192]	; (8001fe8 <TIM_Base_SetConfig+0xec>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d003      	beq.n	8001f34 <TIM_Base_SetConfig+0x38>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a2f      	ldr	r2, [pc, #188]	; (8001fec <TIM_Base_SetConfig+0xf0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d108      	bne.n	8001f46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a25      	ldr	r2, [pc, #148]	; (8001fe0 <TIM_Base_SetConfig+0xe4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d01b      	beq.n	8001f86 <TIM_Base_SetConfig+0x8a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f54:	d017      	beq.n	8001f86 <TIM_Base_SetConfig+0x8a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a22      	ldr	r2, [pc, #136]	; (8001fe4 <TIM_Base_SetConfig+0xe8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d013      	beq.n	8001f86 <TIM_Base_SetConfig+0x8a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a21      	ldr	r2, [pc, #132]	; (8001fe8 <TIM_Base_SetConfig+0xec>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d00f      	beq.n	8001f86 <TIM_Base_SetConfig+0x8a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a20      	ldr	r2, [pc, #128]	; (8001fec <TIM_Base_SetConfig+0xf0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d00b      	beq.n	8001f86 <TIM_Base_SetConfig+0x8a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a1f      	ldr	r2, [pc, #124]	; (8001ff0 <TIM_Base_SetConfig+0xf4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d007      	beq.n	8001f86 <TIM_Base_SetConfig+0x8a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a1e      	ldr	r2, [pc, #120]	; (8001ff4 <TIM_Base_SetConfig+0xf8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d003      	beq.n	8001f86 <TIM_Base_SetConfig+0x8a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a1d      	ldr	r2, [pc, #116]	; (8001ff8 <TIM_Base_SetConfig+0xfc>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d108      	bne.n	8001f98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a08      	ldr	r2, [pc, #32]	; (8001fe0 <TIM_Base_SetConfig+0xe4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d103      	bne.n	8001fcc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	615a      	str	r2, [r3, #20]
}
 8001fd2:	bf00      	nop
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	40010000 	.word	0x40010000
 8001fe4:	40000400 	.word	0x40000400
 8001fe8:	40000800 	.word	0x40000800
 8001fec:	40000c00 	.word	0x40000c00
 8001ff0:	40014000 	.word	0x40014000
 8001ff4:	40014400 	.word	0x40014400
 8001ff8:	40014800 	.word	0x40014800

08001ffc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e03f      	b.n	80020b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7fe fca6 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2224      	movs	r2, #36	; 0x24
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002066:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f905 	bl	8002278 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800207c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695a      	ldr	r2, [r3, #20]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800208c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800209c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b08a      	sub	sp, #40	; 0x28
 80020c2:	af02      	add	r7, sp, #8
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	603b      	str	r3, [r7, #0]
 80020ca:	4613      	mov	r3, r2
 80020cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b20      	cmp	r3, #32
 80020dc:	d17c      	bne.n	80021d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <HAL_UART_Transmit+0x2c>
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e075      	b.n	80021da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_UART_Transmit+0x3e>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e06e      	b.n	80021da <HAL_UART_Transmit+0x11c>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2221      	movs	r2, #33	; 0x21
 800210e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002112:	f7fe fdab 	bl	8000c6c <HAL_GetTick>
 8002116:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	88fa      	ldrh	r2, [r7, #6]
 800211c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	88fa      	ldrh	r2, [r7, #6]
 8002122:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800212c:	d108      	bne.n	8002140 <HAL_UART_Transmit+0x82>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d104      	bne.n	8002140 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	61bb      	str	r3, [r7, #24]
 800213e:	e003      	b.n	8002148 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002144:	2300      	movs	r3, #0
 8002146:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002150:	e02a      	b.n	80021a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	2200      	movs	r2, #0
 800215a:	2180      	movs	r1, #128	; 0x80
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 f840 	bl	80021e2 <UART_WaitOnFlagUntilTimeout>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e036      	b.n	80021da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10b      	bne.n	800218a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002180:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	3302      	adds	r3, #2
 8002186:	61bb      	str	r3, [r7, #24]
 8002188:	e007      	b.n	800219a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	781a      	ldrb	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	3301      	adds	r3, #1
 8002198:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800219e:	b29b      	uxth	r3, r3
 80021a0:	3b01      	subs	r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1cf      	bne.n	8002152 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	2200      	movs	r2, #0
 80021ba:	2140      	movs	r1, #64	; 0x40
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 f810 	bl	80021e2 <UART_WaitOnFlagUntilTimeout>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e006      	b.n	80021da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2220      	movs	r2, #32
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80021d4:	2300      	movs	r3, #0
 80021d6:	e000      	b.n	80021da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80021d8:	2302      	movs	r3, #2
  }
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3720      	adds	r7, #32
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b084      	sub	sp, #16
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	603b      	str	r3, [r7, #0]
 80021ee:	4613      	mov	r3, r2
 80021f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021f2:	e02c      	b.n	800224e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fa:	d028      	beq.n	800224e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d007      	beq.n	8002212 <UART_WaitOnFlagUntilTimeout+0x30>
 8002202:	f7fe fd33 	bl	8000c6c <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	429a      	cmp	r2, r3
 8002210:	d21d      	bcs.n	800224e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002220:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	695a      	ldr	r2, [r3, #20]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0201 	bic.w	r2, r2, #1
 8002230:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2220      	movs	r2, #32
 8002236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2220      	movs	r2, #32
 800223e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e00f      	b.n	800226e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	4013      	ands	r3, r2
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	429a      	cmp	r2, r3
 800225c:	bf0c      	ite	eq
 800225e:	2301      	moveq	r3, #1
 8002260:	2300      	movne	r3, #0
 8002262:	b2db      	uxtb	r3, r3
 8002264:	461a      	mov	r2, r3
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	429a      	cmp	r2, r3
 800226a:	d0c3      	beq.n	80021f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800227c:	b09f      	sub	sp, #124	; 0x7c
 800227e:	af00      	add	r7, sp, #0
 8002280:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800228c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800228e:	68d9      	ldr	r1, [r3, #12]
 8002290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	ea40 0301 	orr.w	r3, r0, r1
 8002298:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800229a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	431a      	orrs	r2, r3
 80022a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	431a      	orrs	r2, r3
 80022aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80022b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80022bc:	f021 010c 	bic.w	r1, r1, #12
 80022c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022c6:	430b      	orrs	r3, r1
 80022c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80022d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d6:	6999      	ldr	r1, [r3, #24]
 80022d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	ea40 0301 	orr.w	r3, r0, r1
 80022e0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	4bc5      	ldr	r3, [pc, #788]	; (80025fc <UART_SetConfig+0x384>)
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d004      	beq.n	80022f6 <UART_SetConfig+0x7e>
 80022ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4bc3      	ldr	r3, [pc, #780]	; (8002600 <UART_SetConfig+0x388>)
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d103      	bne.n	80022fe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022f6:	f7ff fbcf 	bl	8001a98 <HAL_RCC_GetPCLK2Freq>
 80022fa:	6778      	str	r0, [r7, #116]	; 0x74
 80022fc:	e002      	b.n	8002304 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022fe:	f7ff fbb7 	bl	8001a70 <HAL_RCC_GetPCLK1Freq>
 8002302:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800230c:	f040 80b6 	bne.w	800247c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002310:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002312:	461c      	mov	r4, r3
 8002314:	f04f 0500 	mov.w	r5, #0
 8002318:	4622      	mov	r2, r4
 800231a:	462b      	mov	r3, r5
 800231c:	1891      	adds	r1, r2, r2
 800231e:	6439      	str	r1, [r7, #64]	; 0x40
 8002320:	415b      	adcs	r3, r3
 8002322:	647b      	str	r3, [r7, #68]	; 0x44
 8002324:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002328:	1912      	adds	r2, r2, r4
 800232a:	eb45 0303 	adc.w	r3, r5, r3
 800232e:	f04f 0000 	mov.w	r0, #0
 8002332:	f04f 0100 	mov.w	r1, #0
 8002336:	00d9      	lsls	r1, r3, #3
 8002338:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800233c:	00d0      	lsls	r0, r2, #3
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	1911      	adds	r1, r2, r4
 8002344:	6639      	str	r1, [r7, #96]	; 0x60
 8002346:	416b      	adcs	r3, r5
 8002348:	667b      	str	r3, [r7, #100]	; 0x64
 800234a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	461a      	mov	r2, r3
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	1891      	adds	r1, r2, r2
 8002356:	63b9      	str	r1, [r7, #56]	; 0x38
 8002358:	415b      	adcs	r3, r3
 800235a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800235c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002360:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002364:	f7fd ff8c 	bl	8000280 <__aeabi_uldivmod>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4ba5      	ldr	r3, [pc, #660]	; (8002604 <UART_SetConfig+0x38c>)
 800236e:	fba3 2302 	umull	r2, r3, r3, r2
 8002372:	095b      	lsrs	r3, r3, #5
 8002374:	011e      	lsls	r6, r3, #4
 8002376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002378:	461c      	mov	r4, r3
 800237a:	f04f 0500 	mov.w	r5, #0
 800237e:	4622      	mov	r2, r4
 8002380:	462b      	mov	r3, r5
 8002382:	1891      	adds	r1, r2, r2
 8002384:	6339      	str	r1, [r7, #48]	; 0x30
 8002386:	415b      	adcs	r3, r3
 8002388:	637b      	str	r3, [r7, #52]	; 0x34
 800238a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800238e:	1912      	adds	r2, r2, r4
 8002390:	eb45 0303 	adc.w	r3, r5, r3
 8002394:	f04f 0000 	mov.w	r0, #0
 8002398:	f04f 0100 	mov.w	r1, #0
 800239c:	00d9      	lsls	r1, r3, #3
 800239e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023a2:	00d0      	lsls	r0, r2, #3
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	1911      	adds	r1, r2, r4
 80023aa:	65b9      	str	r1, [r7, #88]	; 0x58
 80023ac:	416b      	adcs	r3, r5
 80023ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	461a      	mov	r2, r3
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	1891      	adds	r1, r2, r2
 80023bc:	62b9      	str	r1, [r7, #40]	; 0x28
 80023be:	415b      	adcs	r3, r3
 80023c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023c6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80023ca:	f7fd ff59 	bl	8000280 <__aeabi_uldivmod>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4b8c      	ldr	r3, [pc, #560]	; (8002604 <UART_SetConfig+0x38c>)
 80023d4:	fba3 1302 	umull	r1, r3, r3, r2
 80023d8:	095b      	lsrs	r3, r3, #5
 80023da:	2164      	movs	r1, #100	; 0x64
 80023dc:	fb01 f303 	mul.w	r3, r1, r3
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	3332      	adds	r3, #50	; 0x32
 80023e6:	4a87      	ldr	r2, [pc, #540]	; (8002604 <UART_SetConfig+0x38c>)
 80023e8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ec:	095b      	lsrs	r3, r3, #5
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80023f4:	441e      	add	r6, r3
 80023f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023f8:	4618      	mov	r0, r3
 80023fa:	f04f 0100 	mov.w	r1, #0
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	1894      	adds	r4, r2, r2
 8002404:	623c      	str	r4, [r7, #32]
 8002406:	415b      	adcs	r3, r3
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
 800240a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800240e:	1812      	adds	r2, r2, r0
 8002410:	eb41 0303 	adc.w	r3, r1, r3
 8002414:	f04f 0400 	mov.w	r4, #0
 8002418:	f04f 0500 	mov.w	r5, #0
 800241c:	00dd      	lsls	r5, r3, #3
 800241e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002422:	00d4      	lsls	r4, r2, #3
 8002424:	4622      	mov	r2, r4
 8002426:	462b      	mov	r3, r5
 8002428:	1814      	adds	r4, r2, r0
 800242a:	653c      	str	r4, [r7, #80]	; 0x50
 800242c:	414b      	adcs	r3, r1
 800242e:	657b      	str	r3, [r7, #84]	; 0x54
 8002430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	461a      	mov	r2, r3
 8002436:	f04f 0300 	mov.w	r3, #0
 800243a:	1891      	adds	r1, r2, r2
 800243c:	61b9      	str	r1, [r7, #24]
 800243e:	415b      	adcs	r3, r3
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002446:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800244a:	f7fd ff19 	bl	8000280 <__aeabi_uldivmod>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4b6c      	ldr	r3, [pc, #432]	; (8002604 <UART_SetConfig+0x38c>)
 8002454:	fba3 1302 	umull	r1, r3, r3, r2
 8002458:	095b      	lsrs	r3, r3, #5
 800245a:	2164      	movs	r1, #100	; 0x64
 800245c:	fb01 f303 	mul.w	r3, r1, r3
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	3332      	adds	r3, #50	; 0x32
 8002466:	4a67      	ldr	r2, [pc, #412]	; (8002604 <UART_SetConfig+0x38c>)
 8002468:	fba2 2303 	umull	r2, r3, r2, r3
 800246c:	095b      	lsrs	r3, r3, #5
 800246e:	f003 0207 	and.w	r2, r3, #7
 8002472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4432      	add	r2, r6
 8002478:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800247a:	e0b9      	b.n	80025f0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800247c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800247e:	461c      	mov	r4, r3
 8002480:	f04f 0500 	mov.w	r5, #0
 8002484:	4622      	mov	r2, r4
 8002486:	462b      	mov	r3, r5
 8002488:	1891      	adds	r1, r2, r2
 800248a:	6139      	str	r1, [r7, #16]
 800248c:	415b      	adcs	r3, r3
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002494:	1912      	adds	r2, r2, r4
 8002496:	eb45 0303 	adc.w	r3, r5, r3
 800249a:	f04f 0000 	mov.w	r0, #0
 800249e:	f04f 0100 	mov.w	r1, #0
 80024a2:	00d9      	lsls	r1, r3, #3
 80024a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024a8:	00d0      	lsls	r0, r2, #3
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	eb12 0804 	adds.w	r8, r2, r4
 80024b2:	eb43 0905 	adc.w	r9, r3, r5
 80024b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f04f 0100 	mov.w	r1, #0
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	f04f 0300 	mov.w	r3, #0
 80024c8:	008b      	lsls	r3, r1, #2
 80024ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80024ce:	0082      	lsls	r2, r0, #2
 80024d0:	4640      	mov	r0, r8
 80024d2:	4649      	mov	r1, r9
 80024d4:	f7fd fed4 	bl	8000280 <__aeabi_uldivmod>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4b49      	ldr	r3, [pc, #292]	; (8002604 <UART_SetConfig+0x38c>)
 80024de:	fba3 2302 	umull	r2, r3, r3, r2
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	011e      	lsls	r6, r3, #4
 80024e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024e8:	4618      	mov	r0, r3
 80024ea:	f04f 0100 	mov.w	r1, #0
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	1894      	adds	r4, r2, r2
 80024f4:	60bc      	str	r4, [r7, #8]
 80024f6:	415b      	adcs	r3, r3
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024fe:	1812      	adds	r2, r2, r0
 8002500:	eb41 0303 	adc.w	r3, r1, r3
 8002504:	f04f 0400 	mov.w	r4, #0
 8002508:	f04f 0500 	mov.w	r5, #0
 800250c:	00dd      	lsls	r5, r3, #3
 800250e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002512:	00d4      	lsls	r4, r2, #3
 8002514:	4622      	mov	r2, r4
 8002516:	462b      	mov	r3, r5
 8002518:	1814      	adds	r4, r2, r0
 800251a:	64bc      	str	r4, [r7, #72]	; 0x48
 800251c:	414b      	adcs	r3, r1
 800251e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	4618      	mov	r0, r3
 8002526:	f04f 0100 	mov.w	r1, #0
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	f04f 0300 	mov.w	r3, #0
 8002532:	008b      	lsls	r3, r1, #2
 8002534:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002538:	0082      	lsls	r2, r0, #2
 800253a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800253e:	f7fd fe9f 	bl	8000280 <__aeabi_uldivmod>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4b2f      	ldr	r3, [pc, #188]	; (8002604 <UART_SetConfig+0x38c>)
 8002548:	fba3 1302 	umull	r1, r3, r3, r2
 800254c:	095b      	lsrs	r3, r3, #5
 800254e:	2164      	movs	r1, #100	; 0x64
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	3332      	adds	r3, #50	; 0x32
 800255a:	4a2a      	ldr	r2, [pc, #168]	; (8002604 <UART_SetConfig+0x38c>)
 800255c:	fba2 2303 	umull	r2, r3, r2, r3
 8002560:	095b      	lsrs	r3, r3, #5
 8002562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002566:	441e      	add	r6, r3
 8002568:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800256a:	4618      	mov	r0, r3
 800256c:	f04f 0100 	mov.w	r1, #0
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	1894      	adds	r4, r2, r2
 8002576:	603c      	str	r4, [r7, #0]
 8002578:	415b      	adcs	r3, r3
 800257a:	607b      	str	r3, [r7, #4]
 800257c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002580:	1812      	adds	r2, r2, r0
 8002582:	eb41 0303 	adc.w	r3, r1, r3
 8002586:	f04f 0400 	mov.w	r4, #0
 800258a:	f04f 0500 	mov.w	r5, #0
 800258e:	00dd      	lsls	r5, r3, #3
 8002590:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002594:	00d4      	lsls	r4, r2, #3
 8002596:	4622      	mov	r2, r4
 8002598:	462b      	mov	r3, r5
 800259a:	eb12 0a00 	adds.w	sl, r2, r0
 800259e:	eb43 0b01 	adc.w	fp, r3, r1
 80025a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f04f 0100 	mov.w	r1, #0
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	f04f 0300 	mov.w	r3, #0
 80025b4:	008b      	lsls	r3, r1, #2
 80025b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80025ba:	0082      	lsls	r2, r0, #2
 80025bc:	4650      	mov	r0, sl
 80025be:	4659      	mov	r1, fp
 80025c0:	f7fd fe5e 	bl	8000280 <__aeabi_uldivmod>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <UART_SetConfig+0x38c>)
 80025ca:	fba3 1302 	umull	r1, r3, r3, r2
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	2164      	movs	r1, #100	; 0x64
 80025d2:	fb01 f303 	mul.w	r3, r1, r3
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	3332      	adds	r3, #50	; 0x32
 80025dc:	4a09      	ldr	r2, [pc, #36]	; (8002604 <UART_SetConfig+0x38c>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	f003 020f 	and.w	r2, r3, #15
 80025e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4432      	add	r2, r6
 80025ee:	609a      	str	r2, [r3, #8]
}
 80025f0:	bf00      	nop
 80025f2:	377c      	adds	r7, #124	; 0x7c
 80025f4:	46bd      	mov	sp, r7
 80025f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025fa:	bf00      	nop
 80025fc:	40011000 	.word	0x40011000
 8002600:	40011400 	.word	0x40011400
 8002604:	51eb851f 	.word	0x51eb851f

08002608 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002616:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800261a:	2b84      	cmp	r3, #132	; 0x84
 800261c:	d005      	beq.n	800262a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800261e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4413      	add	r3, r2
 8002626:	3303      	adds	r3, #3
 8002628:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800262a:	68fb      	ldr	r3, [r7, #12]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800263c:	f000 fa96 	bl	8002b6c <vTaskStartScheduler>
  
  return osOK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	bd80      	pop	{r7, pc}

08002646 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002646:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002648:	b089      	sub	sp, #36	; 0x24
 800264a:	af04      	add	r7, sp, #16
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d020      	beq.n	800269a <osThreadCreate+0x54>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d01c      	beq.n	800269a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685c      	ldr	r4, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681d      	ldr	r5, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691e      	ldr	r6, [r3, #16]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff ffc8 	bl	8002608 <makeFreeRtosPriority>
 8002678:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002682:	9202      	str	r2, [sp, #8]
 8002684:	9301      	str	r3, [sp, #4]
 8002686:	9100      	str	r1, [sp, #0]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	4632      	mov	r2, r6
 800268c:	4629      	mov	r1, r5
 800268e:	4620      	mov	r0, r4
 8002690:	f000 f8d9 	bl	8002846 <xTaskCreateStatic>
 8002694:	4603      	mov	r3, r0
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	e01c      	b.n	80026d4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685c      	ldr	r4, [r3, #4]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026a6:	b29e      	uxth	r6, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff ffaa 	bl	8002608 <makeFreeRtosPriority>
 80026b4:	4602      	mov	r2, r0
 80026b6:	f107 030c 	add.w	r3, r7, #12
 80026ba:	9301      	str	r3, [sp, #4]
 80026bc:	9200      	str	r2, [sp, #0]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	4632      	mov	r2, r6
 80026c2:	4629      	mov	r1, r5
 80026c4:	4620      	mov	r0, r4
 80026c6:	f000 f91b 	bl	8002900 <xTaskCreate>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d001      	beq.n	80026d4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	e000      	b.n	80026d6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80026d4:	68fb      	ldr	r3, [r7, #12]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026de <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f103 0208 	add.w	r2, r3, #8
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f04f 32ff 	mov.w	r2, #4294967295
 80026f6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f103 0208 	add.w	r2, r3, #8
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f103 0208 	add.w	r2, r3, #8
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	601a      	str	r2, [r3, #0]
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002796:	d103      	bne.n	80027a0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	e00c      	b.n	80027ba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3308      	adds	r3, #8
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	e002      	b.n	80027ae <vListInsert+0x2e>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d2f6      	bcs.n	80027a8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	601a      	str	r2, [r3, #0]
}
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6892      	ldr	r2, [r2, #8]
 8002808:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6852      	ldr	r2, [r2, #4]
 8002812:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	429a      	cmp	r2, r3
 800281c:	d103      	bne.n	8002826 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	1e5a      	subs	r2, r3, #1
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002846:	b580      	push	{r7, lr}
 8002848:	b08e      	sub	sp, #56	; 0x38
 800284a:	af04      	add	r7, sp, #16
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10a      	bne.n	8002870 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800285a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285e:	f383 8811 	msr	BASEPRI, r3
 8002862:	f3bf 8f6f 	isb	sy
 8002866:	f3bf 8f4f 	dsb	sy
 800286a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800286c:	bf00      	nop
 800286e:	e7fe      	b.n	800286e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10a      	bne.n	800288c <xTaskCreateStatic+0x46>
	__asm volatile
 8002876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287a:	f383 8811 	msr	BASEPRI, r3
 800287e:	f3bf 8f6f 	isb	sy
 8002882:	f3bf 8f4f 	dsb	sy
 8002886:	61fb      	str	r3, [r7, #28]
}
 8002888:	bf00      	nop
 800288a:	e7fe      	b.n	800288a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800288c:	2354      	movs	r3, #84	; 0x54
 800288e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	2b54      	cmp	r3, #84	; 0x54
 8002894:	d00a      	beq.n	80028ac <xTaskCreateStatic+0x66>
	__asm volatile
 8002896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289a:	f383 8811 	msr	BASEPRI, r3
 800289e:	f3bf 8f6f 	isb	sy
 80028a2:	f3bf 8f4f 	dsb	sy
 80028a6:	61bb      	str	r3, [r7, #24]
}
 80028a8:	bf00      	nop
 80028aa:	e7fe      	b.n	80028aa <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80028ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80028ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d01e      	beq.n	80028f2 <xTaskCreateStatic+0xac>
 80028b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d01b      	beq.n	80028f2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80028cc:	2300      	movs	r3, #0
 80028ce:	9303      	str	r3, [sp, #12]
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	9302      	str	r3, [sp, #8]
 80028d4:	f107 0314 	add.w	r3, r7, #20
 80028d8:	9301      	str	r3, [sp, #4]
 80028da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	68b9      	ldr	r1, [r7, #8]
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f000 f850 	bl	800298a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80028ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028ec:	f000 f8d4 	bl	8002a98 <prvAddNewTaskToReadyList>
 80028f0:	e001      	b.n	80028f6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80028f6:	697b      	ldr	r3, [r7, #20]
	}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3728      	adds	r7, #40	; 0x28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08c      	sub	sp, #48	; 0x30
 8002904:	af04      	add	r7, sp, #16
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	4613      	mov	r3, r2
 800290e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002910:	88fb      	ldrh	r3, [r7, #6]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4618      	mov	r0, r3
 8002916:	f000 ff9f 	bl	8003858 <pvPortMalloc>
 800291a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00e      	beq.n	8002940 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002922:	2054      	movs	r0, #84	; 0x54
 8002924:	f000 ff98 	bl	8003858 <pvPortMalloc>
 8002928:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	631a      	str	r2, [r3, #48]	; 0x30
 8002936:	e005      	b.n	8002944 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002938:	6978      	ldr	r0, [r7, #20]
 800293a:	f001 f859 	bl	80039f0 <vPortFree>
 800293e:	e001      	b.n	8002944 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002940:	2300      	movs	r3, #0
 8002942:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d017      	beq.n	800297a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002952:	88fa      	ldrh	r2, [r7, #6]
 8002954:	2300      	movs	r3, #0
 8002956:	9303      	str	r3, [sp, #12]
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	9302      	str	r3, [sp, #8]
 800295c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295e:	9301      	str	r3, [sp, #4]
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	68b9      	ldr	r1, [r7, #8]
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 f80e 	bl	800298a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800296e:	69f8      	ldr	r0, [r7, #28]
 8002970:	f000 f892 	bl	8002a98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002974:	2301      	movs	r3, #1
 8002976:	61bb      	str	r3, [r7, #24]
 8002978:	e002      	b.n	8002980 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800297a:	f04f 33ff 	mov.w	r3, #4294967295
 800297e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002980:	69bb      	ldr	r3, [r7, #24]
	}
 8002982:	4618      	mov	r0, r3
 8002984:	3720      	adds	r7, #32
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b088      	sub	sp, #32
 800298e:	af00      	add	r7, sp, #0
 8002990:	60f8      	str	r0, [r7, #12]
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	607a      	str	r2, [r7, #4]
 8002996:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029a2:	3b01      	subs	r3, #1
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	f023 0307 	bic.w	r3, r3, #7
 80029b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <prvInitialiseNewTask+0x48>
	__asm volatile
 80029bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c0:	f383 8811 	msr	BASEPRI, r3
 80029c4:	f3bf 8f6f 	isb	sy
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	617b      	str	r3, [r7, #20]
}
 80029ce:	bf00      	nop
 80029d0:	e7fe      	b.n	80029d0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d01f      	beq.n	8002a18 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029d8:	2300      	movs	r3, #0
 80029da:	61fb      	str	r3, [r7, #28]
 80029dc:	e012      	b.n	8002a04 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	4413      	add	r3, r2
 80029e4:	7819      	ldrb	r1, [r3, #0]
 80029e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	4413      	add	r3, r2
 80029ec:	3334      	adds	r3, #52	; 0x34
 80029ee:	460a      	mov	r2, r1
 80029f0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	4413      	add	r3, r2
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d006      	beq.n	8002a0c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	3301      	adds	r3, #1
 8002a02:	61fb      	str	r3, [r7, #28]
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	2b0f      	cmp	r3, #15
 8002a08:	d9e9      	bls.n	80029de <prvInitialiseNewTask+0x54>
 8002a0a:	e000      	b.n	8002a0e <prvInitialiseNewTask+0x84>
			{
				break;
 8002a0c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a16:	e003      	b.n	8002a20 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a22:	2b06      	cmp	r3, #6
 8002a24:	d901      	bls.n	8002a2a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a26:	2306      	movs	r3, #6
 8002a28:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a2e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a34:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a38:	2200      	movs	r2, #0
 8002a3a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3e:	3304      	adds	r3, #4
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff fe6c 	bl	800271e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a48:	3318      	adds	r3, #24
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fe67 	bl	800271e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a54:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a58:	f1c3 0207 	rsb	r2, r3, #7
 8002a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a64:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a68:	2200      	movs	r2, #0
 8002a6a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	68f9      	ldr	r1, [r7, #12]
 8002a78:	69b8      	ldr	r0, [r7, #24]
 8002a7a:	f000 fce1 	bl	8003440 <pxPortInitialiseStack>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a82:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a90:	bf00      	nop
 8002a92:	3720      	adds	r7, #32
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002aa0:	f000 fdf8 	bl	8003694 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002aa4:	4b2a      	ldr	r3, [pc, #168]	; (8002b50 <prvAddNewTaskToReadyList+0xb8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	4a29      	ldr	r2, [pc, #164]	; (8002b50 <prvAddNewTaskToReadyList+0xb8>)
 8002aac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002aae:	4b29      	ldr	r3, [pc, #164]	; (8002b54 <prvAddNewTaskToReadyList+0xbc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d109      	bne.n	8002aca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002ab6:	4a27      	ldr	r2, [pc, #156]	; (8002b54 <prvAddNewTaskToReadyList+0xbc>)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002abc:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <prvAddNewTaskToReadyList+0xb8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d110      	bne.n	8002ae6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002ac4:	f000 fa88 	bl	8002fd8 <prvInitialiseTaskLists>
 8002ac8:	e00d      	b.n	8002ae6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002aca:	4b23      	ldr	r3, [pc, #140]	; (8002b58 <prvAddNewTaskToReadyList+0xc0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d109      	bne.n	8002ae6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ad2:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <prvAddNewTaskToReadyList+0xbc>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d802      	bhi.n	8002ae6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002ae0:	4a1c      	ldr	r2, [pc, #112]	; (8002b54 <prvAddNewTaskToReadyList+0xbc>)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002ae6:	4b1d      	ldr	r3, [pc, #116]	; (8002b5c <prvAddNewTaskToReadyList+0xc4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	3301      	adds	r3, #1
 8002aec:	4a1b      	ldr	r2, [pc, #108]	; (8002b5c <prvAddNewTaskToReadyList+0xc4>)
 8002aee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	2201      	movs	r2, #1
 8002af6:	409a      	lsls	r2, r3
 8002af8:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <prvAddNewTaskToReadyList+0xc8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	4a18      	ldr	r2, [pc, #96]	; (8002b60 <prvAddNewTaskToReadyList+0xc8>)
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4a15      	ldr	r2, [pc, #84]	; (8002b64 <prvAddNewTaskToReadyList+0xcc>)
 8002b10:	441a      	add	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3304      	adds	r3, #4
 8002b16:	4619      	mov	r1, r3
 8002b18:	4610      	mov	r0, r2
 8002b1a:	f7ff fe0d 	bl	8002738 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002b1e:	f000 fde9 	bl	80036f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002b22:	4b0d      	ldr	r3, [pc, #52]	; (8002b58 <prvAddNewTaskToReadyList+0xc0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00e      	beq.n	8002b48 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <prvAddNewTaskToReadyList+0xbc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d207      	bcs.n	8002b48 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002b38:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <prvAddNewTaskToReadyList+0xd0>)
 8002b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b48:	bf00      	nop
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	200003e8 	.word	0x200003e8
 8002b54:	200002e8 	.word	0x200002e8
 8002b58:	200003f4 	.word	0x200003f4
 8002b5c:	20000404 	.word	0x20000404
 8002b60:	200003f0 	.word	0x200003f0
 8002b64:	200002ec 	.word	0x200002ec
 8002b68:	e000ed04 	.word	0xe000ed04

08002b6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08a      	sub	sp, #40	; 0x28
 8002b70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002b7a:	463a      	mov	r2, r7
 8002b7c:	1d39      	adds	r1, r7, #4
 8002b7e:	f107 0308 	add.w	r3, r7, #8
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fd fcf8 	bl	8000578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002b88:	6839      	ldr	r1, [r7, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	9202      	str	r2, [sp, #8]
 8002b90:	9301      	str	r3, [sp, #4]
 8002b92:	2300      	movs	r3, #0
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	2300      	movs	r3, #0
 8002b98:	460a      	mov	r2, r1
 8002b9a:	491e      	ldr	r1, [pc, #120]	; (8002c14 <vTaskStartScheduler+0xa8>)
 8002b9c:	481e      	ldr	r0, [pc, #120]	; (8002c18 <vTaskStartScheduler+0xac>)
 8002b9e:	f7ff fe52 	bl	8002846 <xTaskCreateStatic>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	4a1d      	ldr	r2, [pc, #116]	; (8002c1c <vTaskStartScheduler+0xb0>)
 8002ba6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002ba8:	4b1c      	ldr	r3, [pc, #112]	; (8002c1c <vTaskStartScheduler+0xb0>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	e001      	b.n	8002bba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d116      	bne.n	8002bee <vTaskStartScheduler+0x82>
	__asm volatile
 8002bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc4:	f383 8811 	msr	BASEPRI, r3
 8002bc8:	f3bf 8f6f 	isb	sy
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	613b      	str	r3, [r7, #16]
}
 8002bd2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002bd4:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <vTaskStartScheduler+0xb4>)
 8002bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002bdc:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <vTaskStartScheduler+0xb8>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002be2:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <vTaskStartScheduler+0xbc>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002be8:	f000 fcb2 	bl	8003550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002bec:	e00e      	b.n	8002c0c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf4:	d10a      	bne.n	8002c0c <vTaskStartScheduler+0xa0>
	__asm volatile
 8002bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfa:	f383 8811 	msr	BASEPRI, r3
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	60fb      	str	r3, [r7, #12]
}
 8002c08:	bf00      	nop
 8002c0a:	e7fe      	b.n	8002c0a <vTaskStartScheduler+0x9e>
}
 8002c0c:	bf00      	nop
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	080045dc 	.word	0x080045dc
 8002c18:	08002fa9 	.word	0x08002fa9
 8002c1c:	2000040c 	.word	0x2000040c
 8002c20:	20000408 	.word	0x20000408
 8002c24:	200003f4 	.word	0x200003f4
 8002c28:	200003ec 	.word	0x200003ec

08002c2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002c30:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <vTaskSuspendAll+0x18>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	3301      	adds	r3, #1
 8002c36:	4a03      	ldr	r2, [pc, #12]	; (8002c44 <vTaskSuspendAll+0x18>)
 8002c38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002c3a:	bf00      	nop
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	20000410 	.word	0x20000410

08002c48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002c56:	4b41      	ldr	r3, [pc, #260]	; (8002d5c <xTaskResumeAll+0x114>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10a      	bne.n	8002c74 <xTaskResumeAll+0x2c>
	__asm volatile
 8002c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c62:	f383 8811 	msr	BASEPRI, r3
 8002c66:	f3bf 8f6f 	isb	sy
 8002c6a:	f3bf 8f4f 	dsb	sy
 8002c6e:	603b      	str	r3, [r7, #0]
}
 8002c70:	bf00      	nop
 8002c72:	e7fe      	b.n	8002c72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002c74:	f000 fd0e 	bl	8003694 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002c78:	4b38      	ldr	r3, [pc, #224]	; (8002d5c <xTaskResumeAll+0x114>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	4a37      	ldr	r2, [pc, #220]	; (8002d5c <xTaskResumeAll+0x114>)
 8002c80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c82:	4b36      	ldr	r3, [pc, #216]	; (8002d5c <xTaskResumeAll+0x114>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d161      	bne.n	8002d4e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c8a:	4b35      	ldr	r3, [pc, #212]	; (8002d60 <xTaskResumeAll+0x118>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d05d      	beq.n	8002d4e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c92:	e02e      	b.n	8002cf2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c94:	4b33      	ldr	r3, [pc, #204]	; (8002d64 <xTaskResumeAll+0x11c>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	3318      	adds	r3, #24
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff fda6 	bl	80027f2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	3304      	adds	r3, #4
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff fda1 	bl	80027f2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	4b2b      	ldr	r3, [pc, #172]	; (8002d68 <xTaskResumeAll+0x120>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	4a2a      	ldr	r2, [pc, #168]	; (8002d68 <xTaskResumeAll+0x120>)
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4a27      	ldr	r2, [pc, #156]	; (8002d6c <xTaskResumeAll+0x124>)
 8002cd0:	441a      	add	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4610      	mov	r0, r2
 8002cda:	f7ff fd2d 	bl	8002738 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce2:	4b23      	ldr	r3, [pc, #140]	; (8002d70 <xTaskResumeAll+0x128>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d302      	bcc.n	8002cf2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002cec:	4b21      	ldr	r3, [pc, #132]	; (8002d74 <xTaskResumeAll+0x12c>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cf2:	4b1c      	ldr	r3, [pc, #112]	; (8002d64 <xTaskResumeAll+0x11c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1cc      	bne.n	8002c94 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002d00:	f000 fa08 	bl	8003114 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002d04:	4b1c      	ldr	r3, [pc, #112]	; (8002d78 <xTaskResumeAll+0x130>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d010      	beq.n	8002d32 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002d10:	f000 f836 	bl	8002d80 <xTaskIncrementTick>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002d1a:	4b16      	ldr	r3, [pc, #88]	; (8002d74 <xTaskResumeAll+0x12c>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1f1      	bne.n	8002d10 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002d2c:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <xTaskResumeAll+0x130>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002d32:	4b10      	ldr	r3, [pc, #64]	; (8002d74 <xTaskResumeAll+0x12c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d009      	beq.n	8002d4e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002d3e:	4b0f      	ldr	r3, [pc, #60]	; (8002d7c <xTaskResumeAll+0x134>)
 8002d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002d4e:	f000 fcd1 	bl	80036f4 <vPortExitCritical>

	return xAlreadyYielded;
 8002d52:	68bb      	ldr	r3, [r7, #8]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	20000410 	.word	0x20000410
 8002d60:	200003e8 	.word	0x200003e8
 8002d64:	200003a8 	.word	0x200003a8
 8002d68:	200003f0 	.word	0x200003f0
 8002d6c:	200002ec 	.word	0x200002ec
 8002d70:	200002e8 	.word	0x200002e8
 8002d74:	200003fc 	.word	0x200003fc
 8002d78:	200003f8 	.word	0x200003f8
 8002d7c:	e000ed04 	.word	0xe000ed04

08002d80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d8a:	4b4e      	ldr	r3, [pc, #312]	; (8002ec4 <xTaskIncrementTick+0x144>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f040 808e 	bne.w	8002eb0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d94:	4b4c      	ldr	r3, [pc, #304]	; (8002ec8 <xTaskIncrementTick+0x148>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002d9c:	4a4a      	ldr	r2, [pc, #296]	; (8002ec8 <xTaskIncrementTick+0x148>)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d120      	bne.n	8002dea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002da8:	4b48      	ldr	r3, [pc, #288]	; (8002ecc <xTaskIncrementTick+0x14c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <xTaskIncrementTick+0x48>
	__asm volatile
 8002db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db6:	f383 8811 	msr	BASEPRI, r3
 8002dba:	f3bf 8f6f 	isb	sy
 8002dbe:	f3bf 8f4f 	dsb	sy
 8002dc2:	603b      	str	r3, [r7, #0]
}
 8002dc4:	bf00      	nop
 8002dc6:	e7fe      	b.n	8002dc6 <xTaskIncrementTick+0x46>
 8002dc8:	4b40      	ldr	r3, [pc, #256]	; (8002ecc <xTaskIncrementTick+0x14c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	4b40      	ldr	r3, [pc, #256]	; (8002ed0 <xTaskIncrementTick+0x150>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a3e      	ldr	r2, [pc, #248]	; (8002ecc <xTaskIncrementTick+0x14c>)
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	4a3e      	ldr	r2, [pc, #248]	; (8002ed0 <xTaskIncrementTick+0x150>)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	4b3d      	ldr	r3, [pc, #244]	; (8002ed4 <xTaskIncrementTick+0x154>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	3301      	adds	r3, #1
 8002de2:	4a3c      	ldr	r2, [pc, #240]	; (8002ed4 <xTaskIncrementTick+0x154>)
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	f000 f995 	bl	8003114 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002dea:	4b3b      	ldr	r3, [pc, #236]	; (8002ed8 <xTaskIncrementTick+0x158>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d348      	bcc.n	8002e86 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002df4:	4b35      	ldr	r3, [pc, #212]	; (8002ecc <xTaskIncrementTick+0x14c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d104      	bne.n	8002e08 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dfe:	4b36      	ldr	r3, [pc, #216]	; (8002ed8 <xTaskIncrementTick+0x158>)
 8002e00:	f04f 32ff 	mov.w	r2, #4294967295
 8002e04:	601a      	str	r2, [r3, #0]
					break;
 8002e06:	e03e      	b.n	8002e86 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e08:	4b30      	ldr	r3, [pc, #192]	; (8002ecc <xTaskIncrementTick+0x14c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d203      	bcs.n	8002e28 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002e20:	4a2d      	ldr	r2, [pc, #180]	; (8002ed8 <xTaskIncrementTick+0x158>)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002e26:	e02e      	b.n	8002e86 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff fce0 	bl	80027f2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d004      	beq.n	8002e44 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	3318      	adds	r3, #24
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff fcd7 	bl	80027f2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	2201      	movs	r2, #1
 8002e4a:	409a      	lsls	r2, r3
 8002e4c:	4b23      	ldr	r3, [pc, #140]	; (8002edc <xTaskIncrementTick+0x15c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	4a22      	ldr	r2, [pc, #136]	; (8002edc <xTaskIncrementTick+0x15c>)
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4a1f      	ldr	r2, [pc, #124]	; (8002ee0 <xTaskIncrementTick+0x160>)
 8002e64:	441a      	add	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	f7ff fc63 	bl	8002738 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e76:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <xTaskIncrementTick+0x164>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d3b9      	bcc.n	8002df4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002e80:	2301      	movs	r3, #1
 8002e82:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e84:	e7b6      	b.n	8002df4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e86:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <xTaskIncrementTick+0x164>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e8c:	4914      	ldr	r1, [pc, #80]	; (8002ee0 <xTaskIncrementTick+0x160>)
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d901      	bls.n	8002ea2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002ea2:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <xTaskIncrementTick+0x168>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	e004      	b.n	8002eba <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002eb0:	4b0e      	ldr	r3, [pc, #56]	; (8002eec <xTaskIncrementTick+0x16c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	4a0d      	ldr	r2, [pc, #52]	; (8002eec <xTaskIncrementTick+0x16c>)
 8002eb8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002eba:	697b      	ldr	r3, [r7, #20]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20000410 	.word	0x20000410
 8002ec8:	200003ec 	.word	0x200003ec
 8002ecc:	200003a0 	.word	0x200003a0
 8002ed0:	200003a4 	.word	0x200003a4
 8002ed4:	20000400 	.word	0x20000400
 8002ed8:	20000408 	.word	0x20000408
 8002edc:	200003f0 	.word	0x200003f0
 8002ee0:	200002ec 	.word	0x200002ec
 8002ee4:	200002e8 	.word	0x200002e8
 8002ee8:	200003fc 	.word	0x200003fc
 8002eec:	200003f8 	.word	0x200003f8

08002ef0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ef6:	4b27      	ldr	r3, [pc, #156]	; (8002f94 <vTaskSwitchContext+0xa4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002efe:	4b26      	ldr	r3, [pc, #152]	; (8002f98 <vTaskSwitchContext+0xa8>)
 8002f00:	2201      	movs	r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002f04:	e03f      	b.n	8002f86 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002f06:	4b24      	ldr	r3, [pc, #144]	; (8002f98 <vTaskSwitchContext+0xa8>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f0c:	4b23      	ldr	r3, [pc, #140]	; (8002f9c <vTaskSwitchContext+0xac>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	fab3 f383 	clz	r3, r3
 8002f18:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002f1a:	7afb      	ldrb	r3, [r7, #11]
 8002f1c:	f1c3 031f 	rsb	r3, r3, #31
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	491f      	ldr	r1, [pc, #124]	; (8002fa0 <vTaskSwitchContext+0xb0>)
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10a      	bne.n	8002f4c <vTaskSwitchContext+0x5c>
	__asm volatile
 8002f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3a:	f383 8811 	msr	BASEPRI, r3
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	f3bf 8f4f 	dsb	sy
 8002f46:	607b      	str	r3, [r7, #4]
}
 8002f48:	bf00      	nop
 8002f4a:	e7fe      	b.n	8002f4a <vTaskSwitchContext+0x5a>
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4a12      	ldr	r2, [pc, #72]	; (8002fa0 <vTaskSwitchContext+0xb0>)
 8002f58:	4413      	add	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	3308      	adds	r3, #8
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d104      	bne.n	8002f7c <vTaskSwitchContext+0x8c>
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	605a      	str	r2, [r3, #4]
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	4a08      	ldr	r2, [pc, #32]	; (8002fa4 <vTaskSwitchContext+0xb4>)
 8002f84:	6013      	str	r3, [r2, #0]
}
 8002f86:	bf00      	nop
 8002f88:	371c      	adds	r7, #28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	20000410 	.word	0x20000410
 8002f98:	200003fc 	.word	0x200003fc
 8002f9c:	200003f0 	.word	0x200003f0
 8002fa0:	200002ec 	.word	0x200002ec
 8002fa4:	200002e8 	.word	0x200002e8

08002fa8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002fb0:	f000 f852 	bl	8003058 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <prvIdleTask+0x28>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d9f9      	bls.n	8002fb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <prvIdleTask+0x2c>)
 8002fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002fcc:	e7f0      	b.n	8002fb0 <prvIdleTask+0x8>
 8002fce:	bf00      	nop
 8002fd0:	200002ec 	.word	0x200002ec
 8002fd4:	e000ed04 	.word	0xe000ed04

08002fd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fde:	2300      	movs	r3, #0
 8002fe0:	607b      	str	r3, [r7, #4]
 8002fe2:	e00c      	b.n	8002ffe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4a12      	ldr	r2, [pc, #72]	; (8003038 <prvInitialiseTaskLists+0x60>)
 8002ff0:	4413      	add	r3, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fb73 	bl	80026de <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	607b      	str	r3, [r7, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b06      	cmp	r3, #6
 8003002:	d9ef      	bls.n	8002fe4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003004:	480d      	ldr	r0, [pc, #52]	; (800303c <prvInitialiseTaskLists+0x64>)
 8003006:	f7ff fb6a 	bl	80026de <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800300a:	480d      	ldr	r0, [pc, #52]	; (8003040 <prvInitialiseTaskLists+0x68>)
 800300c:	f7ff fb67 	bl	80026de <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003010:	480c      	ldr	r0, [pc, #48]	; (8003044 <prvInitialiseTaskLists+0x6c>)
 8003012:	f7ff fb64 	bl	80026de <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003016:	480c      	ldr	r0, [pc, #48]	; (8003048 <prvInitialiseTaskLists+0x70>)
 8003018:	f7ff fb61 	bl	80026de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800301c:	480b      	ldr	r0, [pc, #44]	; (800304c <prvInitialiseTaskLists+0x74>)
 800301e:	f7ff fb5e 	bl	80026de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003022:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <prvInitialiseTaskLists+0x78>)
 8003024:	4a05      	ldr	r2, [pc, #20]	; (800303c <prvInitialiseTaskLists+0x64>)
 8003026:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003028:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <prvInitialiseTaskLists+0x7c>)
 800302a:	4a05      	ldr	r2, [pc, #20]	; (8003040 <prvInitialiseTaskLists+0x68>)
 800302c:	601a      	str	r2, [r3, #0]
}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	200002ec 	.word	0x200002ec
 800303c:	20000378 	.word	0x20000378
 8003040:	2000038c 	.word	0x2000038c
 8003044:	200003a8 	.word	0x200003a8
 8003048:	200003bc 	.word	0x200003bc
 800304c:	200003d4 	.word	0x200003d4
 8003050:	200003a0 	.word	0x200003a0
 8003054:	200003a4 	.word	0x200003a4

08003058 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800305e:	e019      	b.n	8003094 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003060:	f000 fb18 	bl	8003694 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003064:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <prvCheckTasksWaitingTermination+0x50>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3304      	adds	r3, #4
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff fbbe 	bl	80027f2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003076:	4b0d      	ldr	r3, [pc, #52]	; (80030ac <prvCheckTasksWaitingTermination+0x54>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	3b01      	subs	r3, #1
 800307c:	4a0b      	ldr	r2, [pc, #44]	; (80030ac <prvCheckTasksWaitingTermination+0x54>)
 800307e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <prvCheckTasksWaitingTermination+0x58>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	3b01      	subs	r3, #1
 8003086:	4a0a      	ldr	r2, [pc, #40]	; (80030b0 <prvCheckTasksWaitingTermination+0x58>)
 8003088:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800308a:	f000 fb33 	bl	80036f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f810 	bl	80030b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003094:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <prvCheckTasksWaitingTermination+0x58>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1e1      	bne.n	8003060 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800309c:	bf00      	nop
 800309e:	bf00      	nop
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	200003bc 	.word	0x200003bc
 80030ac:	200003e8 	.word	0x200003e8
 80030b0:	200003d0 	.word	0x200003d0

080030b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d108      	bne.n	80030d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 fc90 	bl	80039f0 <vPortFree>
				vPortFree( pxTCB );
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 fc8d 	bl	80039f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80030d6:	e018      	b.n	800310a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d103      	bne.n	80030ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fc84 	bl	80039f0 <vPortFree>
	}
 80030e8:	e00f      	b.n	800310a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d00a      	beq.n	800310a <prvDeleteTCB+0x56>
	__asm volatile
 80030f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f8:	f383 8811 	msr	BASEPRI, r3
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	60fb      	str	r3, [r7, #12]
}
 8003106:	bf00      	nop
 8003108:	e7fe      	b.n	8003108 <prvDeleteTCB+0x54>
	}
 800310a:	bf00      	nop
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800311a:	4b0c      	ldr	r3, [pc, #48]	; (800314c <prvResetNextTaskUnblockTime+0x38>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d104      	bne.n	800312e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003124:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <prvResetNextTaskUnblockTime+0x3c>)
 8003126:	f04f 32ff 	mov.w	r2, #4294967295
 800312a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800312c:	e008      	b.n	8003140 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800312e:	4b07      	ldr	r3, [pc, #28]	; (800314c <prvResetNextTaskUnblockTime+0x38>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	4a04      	ldr	r2, [pc, #16]	; (8003150 <prvResetNextTaskUnblockTime+0x3c>)
 800313e:	6013      	str	r3, [r2, #0]
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	200003a0 	.word	0x200003a0
 8003150:	20000408 	.word	0x20000408

08003154 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8003162:	f000 fa97 	bl	8003694 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8003166:	4b26      	ldr	r3, [pc, #152]	; (8003200 <xTaskNotifyWait+0xac>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d01a      	beq.n	80031aa <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8003174:	4b22      	ldr	r3, [pc, #136]	; (8003200 <xTaskNotifyWait+0xac>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	43d2      	mvns	r2, r2
 800317e:	400a      	ands	r2, r1
 8003180:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8003182:	4b1f      	ldr	r3, [pc, #124]	; (8003200 <xTaskNotifyWait+0xac>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00b      	beq.n	80031aa <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003192:	2101      	movs	r1, #1
 8003194:	6838      	ldr	r0, [r7, #0]
 8003196:	f000 f8ed 	bl	8003374 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800319a:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <xTaskNotifyWait+0xb0>)
 800319c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	f3bf 8f4f 	dsb	sy
 80031a6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80031aa:	f000 faa3 	bl	80036f4 <vPortExitCritical>

		taskENTER_CRITICAL();
 80031ae:	f000 fa71 	bl	8003694 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d004      	beq.n	80031c2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80031b8:	4b11      	ldr	r3, [pc, #68]	; (8003200 <xTaskNotifyWait+0xac>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80031c2:	4b0f      	ldr	r3, [pc, #60]	; (8003200 <xTaskNotifyWait+0xac>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d002      	beq.n	80031d6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	e008      	b.n	80031e8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80031d6:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <xTaskNotifyWait+0xac>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	43d2      	mvns	r2, r2
 80031e0:	400a      	ands	r2, r1
 80031e2:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 80031e4:	2301      	movs	r3, #1
 80031e6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80031e8:	4b05      	ldr	r3, [pc, #20]	; (8003200 <xTaskNotifyWait+0xac>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 80031f2:	f000 fa7f 	bl	80036f4 <vPortExitCritical>

		return xReturn;
 80031f6:	697b      	ldr	r3, [r7, #20]
	}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	200002e8 	.word	0x200002e8
 8003204:	e000ed04 	.word	0xe000ed04

08003208 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08a      	sub	sp, #40	; 0x28
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	4613      	mov	r3, r2
 8003216:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8003218:	2301      	movs	r3, #1
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10a      	bne.n	8003238 <xTaskGenericNotify+0x30>
	__asm volatile
 8003222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003226:	f383 8811 	msr	BASEPRI, r3
 800322a:	f3bf 8f6f 	isb	sy
 800322e:	f3bf 8f4f 	dsb	sy
 8003232:	61bb      	str	r3, [r7, #24]
}
 8003234:	bf00      	nop
 8003236:	e7fe      	b.n	8003236 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800323c:	f000 fa2a 	bl	8003694 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003254:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	2202      	movs	r2, #2
 800325a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	2b04      	cmp	r3, #4
 8003262:	d828      	bhi.n	80032b6 <xTaskGenericNotify+0xae>
 8003264:	a201      	add	r2, pc, #4	; (adr r2, 800326c <xTaskGenericNotify+0x64>)
 8003266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326a:	bf00      	nop
 800326c:	080032d7 	.word	0x080032d7
 8003270:	08003281 	.word	0x08003281
 8003274:	0800328f 	.word	0x0800328f
 8003278:	0800329b 	.word	0x0800329b
 800327c:	080032a3 	.word	0x080032a3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	431a      	orrs	r2, r3
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800328c:	e026      	b.n	80032dc <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8003298:	e020      	b.n	80032dc <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80032a0:	e01c      	b.n	80032dc <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80032a2:	7ffb      	ldrb	r3, [r7, #31]
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d003      	beq.n	80032b0 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80032ae:	e015      	b.n	80032dc <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80032b4:	e012      	b.n	80032dc <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032be:	d00c      	beq.n	80032da <xTaskGenericNotify+0xd2>
	__asm volatile
 80032c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c4:	f383 8811 	msr	BASEPRI, r3
 80032c8:	f3bf 8f6f 	isb	sy
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	617b      	str	r3, [r7, #20]
}
 80032d2:	bf00      	nop
 80032d4:	e7fe      	b.n	80032d4 <xTaskGenericNotify+0xcc>
					break;
 80032d6:	bf00      	nop
 80032d8:	e000      	b.n	80032dc <xTaskGenericNotify+0xd4>

					break;
 80032da:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80032dc:	7ffb      	ldrb	r3, [r7, #31]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d139      	bne.n	8003356 <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	3304      	adds	r3, #4
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff fa83 	bl	80027f2 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f0:	2201      	movs	r2, #1
 80032f2:	409a      	lsls	r2, r3
 80032f4:	4b1b      	ldr	r3, [pc, #108]	; (8003364 <xTaskGenericNotify+0x15c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	4a1a      	ldr	r2, [pc, #104]	; (8003364 <xTaskGenericNotify+0x15c>)
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4a17      	ldr	r2, [pc, #92]	; (8003368 <xTaskGenericNotify+0x160>)
 800330c:	441a      	add	r2, r3
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	3304      	adds	r3, #4
 8003312:	4619      	mov	r1, r3
 8003314:	4610      	mov	r0, r2
 8003316:	f7ff fa0f 	bl	8002738 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <xTaskGenericNotify+0x130>
	__asm volatile
 8003322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	613b      	str	r3, [r7, #16]
}
 8003334:	bf00      	nop
 8003336:	e7fe      	b.n	8003336 <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333c:	4b0b      	ldr	r3, [pc, #44]	; (800336c <xTaskGenericNotify+0x164>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	429a      	cmp	r2, r3
 8003344:	d907      	bls.n	8003356 <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8003346:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <xTaskGenericNotify+0x168>)
 8003348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	f3bf 8f4f 	dsb	sy
 8003352:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8003356:	f000 f9cd 	bl	80036f4 <vPortExitCritical>

		return xReturn;
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800335c:	4618      	mov	r0, r3
 800335e:	3728      	adds	r7, #40	; 0x28
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	200003f0 	.word	0x200003f0
 8003368:	200002ec 	.word	0x200002ec
 800336c:	200002e8 	.word	0x200002e8
 8003370:	e000ed04 	.word	0xe000ed04

08003374 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800337e:	4b29      	ldr	r3, [pc, #164]	; (8003424 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003384:	4b28      	ldr	r3, [pc, #160]	; (8003428 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	3304      	adds	r3, #4
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff fa31 	bl	80027f2 <uxListRemove>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10b      	bne.n	80033ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003396:	4b24      	ldr	r3, [pc, #144]	; (8003428 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	2201      	movs	r2, #1
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43da      	mvns	r2, r3
 80033a4:	4b21      	ldr	r3, [pc, #132]	; (800342c <prvAddCurrentTaskToDelayedList+0xb8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4013      	ands	r3, r2
 80033aa:	4a20      	ldr	r2, [pc, #128]	; (800342c <prvAddCurrentTaskToDelayedList+0xb8>)
 80033ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b4:	d10a      	bne.n	80033cc <prvAddCurrentTaskToDelayedList+0x58>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d007      	beq.n	80033cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033bc:	4b1a      	ldr	r3, [pc, #104]	; (8003428 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	3304      	adds	r3, #4
 80033c2:	4619      	mov	r1, r3
 80033c4:	481a      	ldr	r0, [pc, #104]	; (8003430 <prvAddCurrentTaskToDelayedList+0xbc>)
 80033c6:	f7ff f9b7 	bl	8002738 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80033ca:	e026      	b.n	800341a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4413      	add	r3, r2
 80033d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033d4:	4b14      	ldr	r3, [pc, #80]	; (8003428 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d209      	bcs.n	80033f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033e4:	4b13      	ldr	r3, [pc, #76]	; (8003434 <prvAddCurrentTaskToDelayedList+0xc0>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	4b0f      	ldr	r3, [pc, #60]	; (8003428 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3304      	adds	r3, #4
 80033ee:	4619      	mov	r1, r3
 80033f0:	4610      	mov	r0, r2
 80033f2:	f7ff f9c5 	bl	8002780 <vListInsert>
}
 80033f6:	e010      	b.n	800341a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033f8:	4b0f      	ldr	r3, [pc, #60]	; (8003438 <prvAddCurrentTaskToDelayedList+0xc4>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3304      	adds	r3, #4
 8003402:	4619      	mov	r1, r3
 8003404:	4610      	mov	r0, r2
 8003406:	f7ff f9bb 	bl	8002780 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800340a:	4b0c      	ldr	r3, [pc, #48]	; (800343c <prvAddCurrentTaskToDelayedList+0xc8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	429a      	cmp	r2, r3
 8003412:	d202      	bcs.n	800341a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003414:	4a09      	ldr	r2, [pc, #36]	; (800343c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	6013      	str	r3, [r2, #0]
}
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	200003ec 	.word	0x200003ec
 8003428:	200002e8 	.word	0x200002e8
 800342c:	200003f0 	.word	0x200003f0
 8003430:	200003d4 	.word	0x200003d4
 8003434:	200003a4 	.word	0x200003a4
 8003438:	200003a0 	.word	0x200003a0
 800343c:	20000408 	.word	0x20000408

08003440 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	3b04      	subs	r3, #4
 8003450:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003458:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	3b04      	subs	r3, #4
 800345e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f023 0201 	bic.w	r2, r3, #1
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	3b04      	subs	r3, #4
 800346e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003470:	4a0c      	ldr	r2, [pc, #48]	; (80034a4 <pxPortInitialiseStack+0x64>)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	3b14      	subs	r3, #20
 800347a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	3b04      	subs	r3, #4
 8003486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f06f 0202 	mvn.w	r2, #2
 800348e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	3b20      	subs	r3, #32
 8003494:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003496:	68fb      	ldr	r3, [r7, #12]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	080034a9 	.word	0x080034a9

080034a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80034ae:	2300      	movs	r3, #0
 80034b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80034b2:	4b12      	ldr	r3, [pc, #72]	; (80034fc <prvTaskExitError+0x54>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ba:	d00a      	beq.n	80034d2 <prvTaskExitError+0x2a>
	__asm volatile
 80034bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	60fb      	str	r3, [r7, #12]
}
 80034ce:	bf00      	nop
 80034d0:	e7fe      	b.n	80034d0 <prvTaskExitError+0x28>
	__asm volatile
 80034d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d6:	f383 8811 	msr	BASEPRI, r3
 80034da:	f3bf 8f6f 	isb	sy
 80034de:	f3bf 8f4f 	dsb	sy
 80034e2:	60bb      	str	r3, [r7, #8]
}
 80034e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80034e6:	bf00      	nop
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0fc      	beq.n	80034e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80034ee:	bf00      	nop
 80034f0:	bf00      	nop
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	2000000c 	.word	0x2000000c

08003500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003500:	4b07      	ldr	r3, [pc, #28]	; (8003520 <pxCurrentTCBConst2>)
 8003502:	6819      	ldr	r1, [r3, #0]
 8003504:	6808      	ldr	r0, [r1, #0]
 8003506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800350a:	f380 8809 	msr	PSP, r0
 800350e:	f3bf 8f6f 	isb	sy
 8003512:	f04f 0000 	mov.w	r0, #0
 8003516:	f380 8811 	msr	BASEPRI, r0
 800351a:	4770      	bx	lr
 800351c:	f3af 8000 	nop.w

08003520 <pxCurrentTCBConst2>:
 8003520:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003524:	bf00      	nop
 8003526:	bf00      	nop

08003528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003528:	4808      	ldr	r0, [pc, #32]	; (800354c <prvPortStartFirstTask+0x24>)
 800352a:	6800      	ldr	r0, [r0, #0]
 800352c:	6800      	ldr	r0, [r0, #0]
 800352e:	f380 8808 	msr	MSP, r0
 8003532:	f04f 0000 	mov.w	r0, #0
 8003536:	f380 8814 	msr	CONTROL, r0
 800353a:	b662      	cpsie	i
 800353c:	b661      	cpsie	f
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	f3bf 8f6f 	isb	sy
 8003546:	df00      	svc	0
 8003548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800354a:	bf00      	nop
 800354c:	e000ed08 	.word	0xe000ed08

08003550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003556:	4b46      	ldr	r3, [pc, #280]	; (8003670 <xPortStartScheduler+0x120>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a46      	ldr	r2, [pc, #280]	; (8003674 <xPortStartScheduler+0x124>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d10a      	bne.n	8003576 <xPortStartScheduler+0x26>
	__asm volatile
 8003560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003564:	f383 8811 	msr	BASEPRI, r3
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	613b      	str	r3, [r7, #16]
}
 8003572:	bf00      	nop
 8003574:	e7fe      	b.n	8003574 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003576:	4b3e      	ldr	r3, [pc, #248]	; (8003670 <xPortStartScheduler+0x120>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a3f      	ldr	r2, [pc, #252]	; (8003678 <xPortStartScheduler+0x128>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d10a      	bne.n	8003596 <xPortStartScheduler+0x46>
	__asm volatile
 8003580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003584:	f383 8811 	msr	BASEPRI, r3
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	60fb      	str	r3, [r7, #12]
}
 8003592:	bf00      	nop
 8003594:	e7fe      	b.n	8003594 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003596:	4b39      	ldr	r3, [pc, #228]	; (800367c <xPortStartScheduler+0x12c>)
 8003598:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	22ff      	movs	r2, #255	; 0xff
 80035a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80035b0:	78fb      	ldrb	r3, [r7, #3]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	4b31      	ldr	r3, [pc, #196]	; (8003680 <xPortStartScheduler+0x130>)
 80035bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80035be:	4b31      	ldr	r3, [pc, #196]	; (8003684 <xPortStartScheduler+0x134>)
 80035c0:	2207      	movs	r2, #7
 80035c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035c4:	e009      	b.n	80035da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80035c6:	4b2f      	ldr	r3, [pc, #188]	; (8003684 <xPortStartScheduler+0x134>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	4a2d      	ldr	r2, [pc, #180]	; (8003684 <xPortStartScheduler+0x134>)
 80035ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035da:	78fb      	ldrb	r3, [r7, #3]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e2:	2b80      	cmp	r3, #128	; 0x80
 80035e4:	d0ef      	beq.n	80035c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80035e6:	4b27      	ldr	r3, [pc, #156]	; (8003684 <xPortStartScheduler+0x134>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f1c3 0307 	rsb	r3, r3, #7
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d00a      	beq.n	8003608 <xPortStartScheduler+0xb8>
	__asm volatile
 80035f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f6:	f383 8811 	msr	BASEPRI, r3
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	60bb      	str	r3, [r7, #8]
}
 8003604:	bf00      	nop
 8003606:	e7fe      	b.n	8003606 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003608:	4b1e      	ldr	r3, [pc, #120]	; (8003684 <xPortStartScheduler+0x134>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	021b      	lsls	r3, r3, #8
 800360e:	4a1d      	ldr	r2, [pc, #116]	; (8003684 <xPortStartScheduler+0x134>)
 8003610:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003612:	4b1c      	ldr	r3, [pc, #112]	; (8003684 <xPortStartScheduler+0x134>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800361a:	4a1a      	ldr	r2, [pc, #104]	; (8003684 <xPortStartScheduler+0x134>)
 800361c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	b2da      	uxtb	r2, r3
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003626:	4b18      	ldr	r3, [pc, #96]	; (8003688 <xPortStartScheduler+0x138>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a17      	ldr	r2, [pc, #92]	; (8003688 <xPortStartScheduler+0x138>)
 800362c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003630:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003632:	4b15      	ldr	r3, [pc, #84]	; (8003688 <xPortStartScheduler+0x138>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a14      	ldr	r2, [pc, #80]	; (8003688 <xPortStartScheduler+0x138>)
 8003638:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800363c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800363e:	f000 f8dd 	bl	80037fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003642:	4b12      	ldr	r3, [pc, #72]	; (800368c <xPortStartScheduler+0x13c>)
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003648:	f000 f8fc 	bl	8003844 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800364c:	4b10      	ldr	r3, [pc, #64]	; (8003690 <xPortStartScheduler+0x140>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a0f      	ldr	r2, [pc, #60]	; (8003690 <xPortStartScheduler+0x140>)
 8003652:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003656:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003658:	f7ff ff66 	bl	8003528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800365c:	f7ff fc48 	bl	8002ef0 <vTaskSwitchContext>
	prvTaskExitError();
 8003660:	f7ff ff22 	bl	80034a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	e000ed00 	.word	0xe000ed00
 8003674:	410fc271 	.word	0x410fc271
 8003678:	410fc270 	.word	0x410fc270
 800367c:	e000e400 	.word	0xe000e400
 8003680:	20000414 	.word	0x20000414
 8003684:	20000418 	.word	0x20000418
 8003688:	e000ed20 	.word	0xe000ed20
 800368c:	2000000c 	.word	0x2000000c
 8003690:	e000ef34 	.word	0xe000ef34

08003694 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
	__asm volatile
 800369a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	607b      	str	r3, [r7, #4]
}
 80036ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80036ae:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <vPortEnterCritical+0x58>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3301      	adds	r3, #1
 80036b4:	4a0d      	ldr	r2, [pc, #52]	; (80036ec <vPortEnterCritical+0x58>)
 80036b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80036b8:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <vPortEnterCritical+0x58>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d10f      	bne.n	80036e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80036c0:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <vPortEnterCritical+0x5c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80036ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	603b      	str	r3, [r7, #0]
}
 80036dc:	bf00      	nop
 80036de:	e7fe      	b.n	80036de <vPortEnterCritical+0x4a>
	}
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	2000000c 	.word	0x2000000c
 80036f0:	e000ed04 	.word	0xe000ed04

080036f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80036fa:	4b12      	ldr	r3, [pc, #72]	; (8003744 <vPortExitCritical+0x50>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10a      	bne.n	8003718 <vPortExitCritical+0x24>
	__asm volatile
 8003702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003706:	f383 8811 	msr	BASEPRI, r3
 800370a:	f3bf 8f6f 	isb	sy
 800370e:	f3bf 8f4f 	dsb	sy
 8003712:	607b      	str	r3, [r7, #4]
}
 8003714:	bf00      	nop
 8003716:	e7fe      	b.n	8003716 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003718:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <vPortExitCritical+0x50>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3b01      	subs	r3, #1
 800371e:	4a09      	ldr	r2, [pc, #36]	; (8003744 <vPortExitCritical+0x50>)
 8003720:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003722:	4b08      	ldr	r3, [pc, #32]	; (8003744 <vPortExitCritical+0x50>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d105      	bne.n	8003736 <vPortExitCritical+0x42>
 800372a:	2300      	movs	r3, #0
 800372c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003734:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	2000000c 	.word	0x2000000c
	...

08003750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003750:	f3ef 8009 	mrs	r0, PSP
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	4b15      	ldr	r3, [pc, #84]	; (80037b0 <pxCurrentTCBConst>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	f01e 0f10 	tst.w	lr, #16
 8003760:	bf08      	it	eq
 8003762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800376a:	6010      	str	r0, [r2, #0]
 800376c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003770:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003774:	f380 8811 	msr	BASEPRI, r0
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	f3bf 8f6f 	isb	sy
 8003780:	f7ff fbb6 	bl	8002ef0 <vTaskSwitchContext>
 8003784:	f04f 0000 	mov.w	r0, #0
 8003788:	f380 8811 	msr	BASEPRI, r0
 800378c:	bc09      	pop	{r0, r3}
 800378e:	6819      	ldr	r1, [r3, #0]
 8003790:	6808      	ldr	r0, [r1, #0]
 8003792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003796:	f01e 0f10 	tst.w	lr, #16
 800379a:	bf08      	it	eq
 800379c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80037a0:	f380 8809 	msr	PSP, r0
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	f3af 8000 	nop.w

080037b0 <pxCurrentTCBConst>:
 80037b0:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80037b4:	bf00      	nop
 80037b6:	bf00      	nop

080037b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
	__asm volatile
 80037be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	607b      	str	r3, [r7, #4]
}
 80037d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80037d2:	f7ff fad5 	bl	8002d80 <xTaskIncrementTick>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80037dc:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <SysTick_Handler+0x40>)
 80037de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	2300      	movs	r3, #0
 80037e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	f383 8811 	msr	BASEPRI, r3
}
 80037ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80037f0:	bf00      	nop
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	e000ed04 	.word	0xe000ed04

080037fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <vPortSetupTimerInterrupt+0x34>)
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003806:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <vPortSetupTimerInterrupt+0x38>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800380c:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <vPortSetupTimerInterrupt+0x3c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a0a      	ldr	r2, [pc, #40]	; (800383c <vPortSetupTimerInterrupt+0x40>)
 8003812:	fba2 2303 	umull	r2, r3, r2, r3
 8003816:	099b      	lsrs	r3, r3, #6
 8003818:	4a09      	ldr	r2, [pc, #36]	; (8003840 <vPortSetupTimerInterrupt+0x44>)
 800381a:	3b01      	subs	r3, #1
 800381c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800381e:	4b04      	ldr	r3, [pc, #16]	; (8003830 <vPortSetupTimerInterrupt+0x34>)
 8003820:	2207      	movs	r2, #7
 8003822:	601a      	str	r2, [r3, #0]
}
 8003824:	bf00      	nop
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	e000e010 	.word	0xe000e010
 8003834:	e000e018 	.word	0xe000e018
 8003838:	20000000 	.word	0x20000000
 800383c:	10624dd3 	.word	0x10624dd3
 8003840:	e000e014 	.word	0xe000e014

08003844 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003844:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003854 <vPortEnableVFP+0x10>
 8003848:	6801      	ldr	r1, [r0, #0]
 800384a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800384e:	6001      	str	r1, [r0, #0]
 8003850:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003852:	bf00      	nop
 8003854:	e000ed88 	.word	0xe000ed88

08003858 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08a      	sub	sp, #40	; 0x28
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003860:	2300      	movs	r3, #0
 8003862:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003864:	f7ff f9e2 	bl	8002c2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003868:	4b5b      	ldr	r3, [pc, #364]	; (80039d8 <pvPortMalloc+0x180>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003870:	f000 f920 	bl	8003ab4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003874:	4b59      	ldr	r3, [pc, #356]	; (80039dc <pvPortMalloc+0x184>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4013      	ands	r3, r2
 800387c:	2b00      	cmp	r3, #0
 800387e:	f040 8093 	bne.w	80039a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d01d      	beq.n	80038c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003888:	2208      	movs	r2, #8
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4413      	add	r3, r2
 800388e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	2b00      	cmp	r3, #0
 8003898:	d014      	beq.n	80038c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f023 0307 	bic.w	r3, r3, #7
 80038a0:	3308      	adds	r3, #8
 80038a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <pvPortMalloc+0x6c>
	__asm volatile
 80038ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b2:	f383 8811 	msr	BASEPRI, r3
 80038b6:	f3bf 8f6f 	isb	sy
 80038ba:	f3bf 8f4f 	dsb	sy
 80038be:	617b      	str	r3, [r7, #20]
}
 80038c0:	bf00      	nop
 80038c2:	e7fe      	b.n	80038c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d06e      	beq.n	80039a8 <pvPortMalloc+0x150>
 80038ca:	4b45      	ldr	r3, [pc, #276]	; (80039e0 <pvPortMalloc+0x188>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d869      	bhi.n	80039a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80038d4:	4b43      	ldr	r3, [pc, #268]	; (80039e4 <pvPortMalloc+0x18c>)
 80038d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80038d8:	4b42      	ldr	r3, [pc, #264]	; (80039e4 <pvPortMalloc+0x18c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038de:	e004      	b.n	80038ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d903      	bls.n	80038fc <pvPortMalloc+0xa4>
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1f1      	bne.n	80038e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80038fc:	4b36      	ldr	r3, [pc, #216]	; (80039d8 <pvPortMalloc+0x180>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003902:	429a      	cmp	r2, r3
 8003904:	d050      	beq.n	80039a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2208      	movs	r2, #8
 800390c:	4413      	add	r3, r2
 800390e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	1ad2      	subs	r2, r2, r3
 8003920:	2308      	movs	r3, #8
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	429a      	cmp	r2, r3
 8003926:	d91f      	bls.n	8003968 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4413      	add	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <pvPortMalloc+0xf8>
	__asm volatile
 800393a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393e:	f383 8811 	msr	BASEPRI, r3
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	613b      	str	r3, [r7, #16]
}
 800394c:	bf00      	nop
 800394e:	e7fe      	b.n	800394e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	1ad2      	subs	r2, r2, r3
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003962:	69b8      	ldr	r0, [r7, #24]
 8003964:	f000 f908 	bl	8003b78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003968:	4b1d      	ldr	r3, [pc, #116]	; (80039e0 <pvPortMalloc+0x188>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	4a1b      	ldr	r2, [pc, #108]	; (80039e0 <pvPortMalloc+0x188>)
 8003974:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003976:	4b1a      	ldr	r3, [pc, #104]	; (80039e0 <pvPortMalloc+0x188>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4b1b      	ldr	r3, [pc, #108]	; (80039e8 <pvPortMalloc+0x190>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d203      	bcs.n	800398a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003982:	4b17      	ldr	r3, [pc, #92]	; (80039e0 <pvPortMalloc+0x188>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a18      	ldr	r2, [pc, #96]	; (80039e8 <pvPortMalloc+0x190>)
 8003988:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	4b13      	ldr	r3, [pc, #76]	; (80039dc <pvPortMalloc+0x184>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	431a      	orrs	r2, r3
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800399e:	4b13      	ldr	r3, [pc, #76]	; (80039ec <pvPortMalloc+0x194>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	3301      	adds	r3, #1
 80039a4:	4a11      	ldr	r2, [pc, #68]	; (80039ec <pvPortMalloc+0x194>)
 80039a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80039a8:	f7ff f94e 	bl	8002c48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <pvPortMalloc+0x174>
	__asm volatile
 80039b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ba:	f383 8811 	msr	BASEPRI, r3
 80039be:	f3bf 8f6f 	isb	sy
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	60fb      	str	r3, [r7, #12]
}
 80039c8:	bf00      	nop
 80039ca:	e7fe      	b.n	80039ca <pvPortMalloc+0x172>
	return pvReturn;
 80039cc:	69fb      	ldr	r3, [r7, #28]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3728      	adds	r7, #40	; 0x28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20004024 	.word	0x20004024
 80039dc:	20004038 	.word	0x20004038
 80039e0:	20004028 	.word	0x20004028
 80039e4:	2000401c 	.word	0x2000401c
 80039e8:	2000402c 	.word	0x2000402c
 80039ec:	20004030 	.word	0x20004030

080039f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d04d      	beq.n	8003a9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003a02:	2308      	movs	r3, #8
 8003a04:	425b      	negs	r3, r3
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4413      	add	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	4b24      	ldr	r3, [pc, #144]	; (8003aa8 <vPortFree+0xb8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10a      	bne.n	8003a34 <vPortFree+0x44>
	__asm volatile
 8003a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a22:	f383 8811 	msr	BASEPRI, r3
 8003a26:	f3bf 8f6f 	isb	sy
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	60fb      	str	r3, [r7, #12]
}
 8003a30:	bf00      	nop
 8003a32:	e7fe      	b.n	8003a32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <vPortFree+0x62>
	__asm volatile
 8003a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a40:	f383 8811 	msr	BASEPRI, r3
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	60bb      	str	r3, [r7, #8]
}
 8003a4e:	bf00      	nop
 8003a50:	e7fe      	b.n	8003a50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	4b14      	ldr	r3, [pc, #80]	; (8003aa8 <vPortFree+0xb8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d01e      	beq.n	8003a9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d11a      	bne.n	8003a9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	4b0e      	ldr	r3, [pc, #56]	; (8003aa8 <vPortFree+0xb8>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	43db      	mvns	r3, r3
 8003a72:	401a      	ands	r2, r3
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003a78:	f7ff f8d8 	bl	8002c2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	4b0a      	ldr	r3, [pc, #40]	; (8003aac <vPortFree+0xbc>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4413      	add	r3, r2
 8003a86:	4a09      	ldr	r2, [pc, #36]	; (8003aac <vPortFree+0xbc>)
 8003a88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a8a:	6938      	ldr	r0, [r7, #16]
 8003a8c:	f000 f874 	bl	8003b78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003a90:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <vPortFree+0xc0>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3301      	adds	r3, #1
 8003a96:	4a06      	ldr	r2, [pc, #24]	; (8003ab0 <vPortFree+0xc0>)
 8003a98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003a9a:	f7ff f8d5 	bl	8002c48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003a9e:	bf00      	nop
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	20004038 	.word	0x20004038
 8003aac:	20004028 	.word	0x20004028
 8003ab0:	20004034 	.word	0x20004034

08003ab4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003aba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003abe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003ac0:	4b27      	ldr	r3, [pc, #156]	; (8003b60 <prvHeapInit+0xac>)
 8003ac2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00c      	beq.n	8003ae8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	3307      	adds	r3, #7
 8003ad2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0307 	bic.w	r3, r3, #7
 8003ada:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	4a1f      	ldr	r2, [pc, #124]	; (8003b60 <prvHeapInit+0xac>)
 8003ae4:	4413      	add	r3, r2
 8003ae6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003aec:	4a1d      	ldr	r2, [pc, #116]	; (8003b64 <prvHeapInit+0xb0>)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003af2:	4b1c      	ldr	r3, [pc, #112]	; (8003b64 <prvHeapInit+0xb0>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	4413      	add	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003b00:	2208      	movs	r2, #8
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	1a9b      	subs	r3, r3, r2
 8003b06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 0307 	bic.w	r3, r3, #7
 8003b0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4a15      	ldr	r2, [pc, #84]	; (8003b68 <prvHeapInit+0xb4>)
 8003b14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003b16:	4b14      	ldr	r3, [pc, #80]	; (8003b68 <prvHeapInit+0xb4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003b1e:	4b12      	ldr	r3, [pc, #72]	; (8003b68 <prvHeapInit+0xb4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	1ad2      	subs	r2, r2, r3
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003b34:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <prvHeapInit+0xb4>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	4a0a      	ldr	r2, [pc, #40]	; (8003b6c <prvHeapInit+0xb8>)
 8003b42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	4a09      	ldr	r2, [pc, #36]	; (8003b70 <prvHeapInit+0xbc>)
 8003b4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003b4c:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <prvHeapInit+0xc0>)
 8003b4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003b52:	601a      	str	r2, [r3, #0]
}
 8003b54:	bf00      	nop
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	2000041c 	.word	0x2000041c
 8003b64:	2000401c 	.word	0x2000401c
 8003b68:	20004024 	.word	0x20004024
 8003b6c:	2000402c 	.word	0x2000402c
 8003b70:	20004028 	.word	0x20004028
 8003b74:	20004038 	.word	0x20004038

08003b78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b80:	4b28      	ldr	r3, [pc, #160]	; (8003c24 <prvInsertBlockIntoFreeList+0xac>)
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	e002      	b.n	8003b8c <prvInsertBlockIntoFreeList+0x14>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d8f7      	bhi.n	8003b86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d108      	bne.n	8003bba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	441a      	add	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	441a      	add	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d118      	bne.n	8003c00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	4b15      	ldr	r3, [pc, #84]	; (8003c28 <prvInsertBlockIntoFreeList+0xb0>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d00d      	beq.n	8003bf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	441a      	add	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	e008      	b.n	8003c08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003bf6:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <prvInsertBlockIntoFreeList+0xb0>)
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	e003      	b.n	8003c08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d002      	beq.n	8003c16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c16:	bf00      	nop
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	2000401c 	.word	0x2000401c
 8003c28:	20004024 	.word	0x20004024

08003c2c <__errno>:
 8003c2c:	4b01      	ldr	r3, [pc, #4]	; (8003c34 <__errno+0x8>)
 8003c2e:	6818      	ldr	r0, [r3, #0]
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	20000010 	.word	0x20000010

08003c38 <__libc_init_array>:
 8003c38:	b570      	push	{r4, r5, r6, lr}
 8003c3a:	4d0d      	ldr	r5, [pc, #52]	; (8003c70 <__libc_init_array+0x38>)
 8003c3c:	4c0d      	ldr	r4, [pc, #52]	; (8003c74 <__libc_init_array+0x3c>)
 8003c3e:	1b64      	subs	r4, r4, r5
 8003c40:	10a4      	asrs	r4, r4, #2
 8003c42:	2600      	movs	r6, #0
 8003c44:	42a6      	cmp	r6, r4
 8003c46:	d109      	bne.n	8003c5c <__libc_init_array+0x24>
 8003c48:	4d0b      	ldr	r5, [pc, #44]	; (8003c78 <__libc_init_array+0x40>)
 8003c4a:	4c0c      	ldr	r4, [pc, #48]	; (8003c7c <__libc_init_array+0x44>)
 8003c4c:	f000 fc4e 	bl	80044ec <_init>
 8003c50:	1b64      	subs	r4, r4, r5
 8003c52:	10a4      	asrs	r4, r4, #2
 8003c54:	2600      	movs	r6, #0
 8003c56:	42a6      	cmp	r6, r4
 8003c58:	d105      	bne.n	8003c66 <__libc_init_array+0x2e>
 8003c5a:	bd70      	pop	{r4, r5, r6, pc}
 8003c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c60:	4798      	blx	r3
 8003c62:	3601      	adds	r6, #1
 8003c64:	e7ee      	b.n	8003c44 <__libc_init_array+0xc>
 8003c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c6a:	4798      	blx	r3
 8003c6c:	3601      	adds	r6, #1
 8003c6e:	e7f2      	b.n	8003c56 <__libc_init_array+0x1e>
 8003c70:	08004638 	.word	0x08004638
 8003c74:	08004638 	.word	0x08004638
 8003c78:	08004638 	.word	0x08004638
 8003c7c:	0800463c 	.word	0x0800463c

08003c80 <memcpy>:
 8003c80:	440a      	add	r2, r1
 8003c82:	4291      	cmp	r1, r2
 8003c84:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c88:	d100      	bne.n	8003c8c <memcpy+0xc>
 8003c8a:	4770      	bx	lr
 8003c8c:	b510      	push	{r4, lr}
 8003c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c96:	4291      	cmp	r1, r2
 8003c98:	d1f9      	bne.n	8003c8e <memcpy+0xe>
 8003c9a:	bd10      	pop	{r4, pc}

08003c9c <memset>:
 8003c9c:	4402      	add	r2, r0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d100      	bne.n	8003ca6 <memset+0xa>
 8003ca4:	4770      	bx	lr
 8003ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8003caa:	e7f9      	b.n	8003ca0 <memset+0x4>

08003cac <siprintf>:
 8003cac:	b40e      	push	{r1, r2, r3}
 8003cae:	b500      	push	{lr}
 8003cb0:	b09c      	sub	sp, #112	; 0x70
 8003cb2:	ab1d      	add	r3, sp, #116	; 0x74
 8003cb4:	9002      	str	r0, [sp, #8]
 8003cb6:	9006      	str	r0, [sp, #24]
 8003cb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003cbc:	4809      	ldr	r0, [pc, #36]	; (8003ce4 <siprintf+0x38>)
 8003cbe:	9107      	str	r1, [sp, #28]
 8003cc0:	9104      	str	r1, [sp, #16]
 8003cc2:	4909      	ldr	r1, [pc, #36]	; (8003ce8 <siprintf+0x3c>)
 8003cc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cc8:	9105      	str	r1, [sp, #20]
 8003cca:	6800      	ldr	r0, [r0, #0]
 8003ccc:	9301      	str	r3, [sp, #4]
 8003cce:	a902      	add	r1, sp, #8
 8003cd0:	f000 f868 	bl	8003da4 <_svfiprintf_r>
 8003cd4:	9b02      	ldr	r3, [sp, #8]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	701a      	strb	r2, [r3, #0]
 8003cda:	b01c      	add	sp, #112	; 0x70
 8003cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ce0:	b003      	add	sp, #12
 8003ce2:	4770      	bx	lr
 8003ce4:	20000010 	.word	0x20000010
 8003ce8:	ffff0208 	.word	0xffff0208

08003cec <__ssputs_r>:
 8003cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cf0:	688e      	ldr	r6, [r1, #8]
 8003cf2:	429e      	cmp	r6, r3
 8003cf4:	4682      	mov	sl, r0
 8003cf6:	460c      	mov	r4, r1
 8003cf8:	4690      	mov	r8, r2
 8003cfa:	461f      	mov	r7, r3
 8003cfc:	d838      	bhi.n	8003d70 <__ssputs_r+0x84>
 8003cfe:	898a      	ldrh	r2, [r1, #12]
 8003d00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d04:	d032      	beq.n	8003d6c <__ssputs_r+0x80>
 8003d06:	6825      	ldr	r5, [r4, #0]
 8003d08:	6909      	ldr	r1, [r1, #16]
 8003d0a:	eba5 0901 	sub.w	r9, r5, r1
 8003d0e:	6965      	ldr	r5, [r4, #20]
 8003d10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d18:	3301      	adds	r3, #1
 8003d1a:	444b      	add	r3, r9
 8003d1c:	106d      	asrs	r5, r5, #1
 8003d1e:	429d      	cmp	r5, r3
 8003d20:	bf38      	it	cc
 8003d22:	461d      	movcc	r5, r3
 8003d24:	0553      	lsls	r3, r2, #21
 8003d26:	d531      	bpl.n	8003d8c <__ssputs_r+0xa0>
 8003d28:	4629      	mov	r1, r5
 8003d2a:	f000 fb39 	bl	80043a0 <_malloc_r>
 8003d2e:	4606      	mov	r6, r0
 8003d30:	b950      	cbnz	r0, 8003d48 <__ssputs_r+0x5c>
 8003d32:	230c      	movs	r3, #12
 8003d34:	f8ca 3000 	str.w	r3, [sl]
 8003d38:	89a3      	ldrh	r3, [r4, #12]
 8003d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d3e:	81a3      	strh	r3, [r4, #12]
 8003d40:	f04f 30ff 	mov.w	r0, #4294967295
 8003d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d48:	6921      	ldr	r1, [r4, #16]
 8003d4a:	464a      	mov	r2, r9
 8003d4c:	f7ff ff98 	bl	8003c80 <memcpy>
 8003d50:	89a3      	ldrh	r3, [r4, #12]
 8003d52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d5a:	81a3      	strh	r3, [r4, #12]
 8003d5c:	6126      	str	r6, [r4, #16]
 8003d5e:	6165      	str	r5, [r4, #20]
 8003d60:	444e      	add	r6, r9
 8003d62:	eba5 0509 	sub.w	r5, r5, r9
 8003d66:	6026      	str	r6, [r4, #0]
 8003d68:	60a5      	str	r5, [r4, #8]
 8003d6a:	463e      	mov	r6, r7
 8003d6c:	42be      	cmp	r6, r7
 8003d6e:	d900      	bls.n	8003d72 <__ssputs_r+0x86>
 8003d70:	463e      	mov	r6, r7
 8003d72:	4632      	mov	r2, r6
 8003d74:	6820      	ldr	r0, [r4, #0]
 8003d76:	4641      	mov	r1, r8
 8003d78:	f000 faa8 	bl	80042cc <memmove>
 8003d7c:	68a3      	ldr	r3, [r4, #8]
 8003d7e:	6822      	ldr	r2, [r4, #0]
 8003d80:	1b9b      	subs	r3, r3, r6
 8003d82:	4432      	add	r2, r6
 8003d84:	60a3      	str	r3, [r4, #8]
 8003d86:	6022      	str	r2, [r4, #0]
 8003d88:	2000      	movs	r0, #0
 8003d8a:	e7db      	b.n	8003d44 <__ssputs_r+0x58>
 8003d8c:	462a      	mov	r2, r5
 8003d8e:	f000 fb61 	bl	8004454 <_realloc_r>
 8003d92:	4606      	mov	r6, r0
 8003d94:	2800      	cmp	r0, #0
 8003d96:	d1e1      	bne.n	8003d5c <__ssputs_r+0x70>
 8003d98:	6921      	ldr	r1, [r4, #16]
 8003d9a:	4650      	mov	r0, sl
 8003d9c:	f000 fab0 	bl	8004300 <_free_r>
 8003da0:	e7c7      	b.n	8003d32 <__ssputs_r+0x46>
	...

08003da4 <_svfiprintf_r>:
 8003da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003da8:	4698      	mov	r8, r3
 8003daa:	898b      	ldrh	r3, [r1, #12]
 8003dac:	061b      	lsls	r3, r3, #24
 8003dae:	b09d      	sub	sp, #116	; 0x74
 8003db0:	4607      	mov	r7, r0
 8003db2:	460d      	mov	r5, r1
 8003db4:	4614      	mov	r4, r2
 8003db6:	d50e      	bpl.n	8003dd6 <_svfiprintf_r+0x32>
 8003db8:	690b      	ldr	r3, [r1, #16]
 8003dba:	b963      	cbnz	r3, 8003dd6 <_svfiprintf_r+0x32>
 8003dbc:	2140      	movs	r1, #64	; 0x40
 8003dbe:	f000 faef 	bl	80043a0 <_malloc_r>
 8003dc2:	6028      	str	r0, [r5, #0]
 8003dc4:	6128      	str	r0, [r5, #16]
 8003dc6:	b920      	cbnz	r0, 8003dd2 <_svfiprintf_r+0x2e>
 8003dc8:	230c      	movs	r3, #12
 8003dca:	603b      	str	r3, [r7, #0]
 8003dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd0:	e0d1      	b.n	8003f76 <_svfiprintf_r+0x1d2>
 8003dd2:	2340      	movs	r3, #64	; 0x40
 8003dd4:	616b      	str	r3, [r5, #20]
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8003dda:	2320      	movs	r3, #32
 8003ddc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003de0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003de4:	2330      	movs	r3, #48	; 0x30
 8003de6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003f90 <_svfiprintf_r+0x1ec>
 8003dea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003dee:	f04f 0901 	mov.w	r9, #1
 8003df2:	4623      	mov	r3, r4
 8003df4:	469a      	mov	sl, r3
 8003df6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dfa:	b10a      	cbz	r2, 8003e00 <_svfiprintf_r+0x5c>
 8003dfc:	2a25      	cmp	r2, #37	; 0x25
 8003dfe:	d1f9      	bne.n	8003df4 <_svfiprintf_r+0x50>
 8003e00:	ebba 0b04 	subs.w	fp, sl, r4
 8003e04:	d00b      	beq.n	8003e1e <_svfiprintf_r+0x7a>
 8003e06:	465b      	mov	r3, fp
 8003e08:	4622      	mov	r2, r4
 8003e0a:	4629      	mov	r1, r5
 8003e0c:	4638      	mov	r0, r7
 8003e0e:	f7ff ff6d 	bl	8003cec <__ssputs_r>
 8003e12:	3001      	adds	r0, #1
 8003e14:	f000 80aa 	beq.w	8003f6c <_svfiprintf_r+0x1c8>
 8003e18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e1a:	445a      	add	r2, fp
 8003e1c:	9209      	str	r2, [sp, #36]	; 0x24
 8003e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 80a2 	beq.w	8003f6c <_svfiprintf_r+0x1c8>
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e32:	f10a 0a01 	add.w	sl, sl, #1
 8003e36:	9304      	str	r3, [sp, #16]
 8003e38:	9307      	str	r3, [sp, #28]
 8003e3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e3e:	931a      	str	r3, [sp, #104]	; 0x68
 8003e40:	4654      	mov	r4, sl
 8003e42:	2205      	movs	r2, #5
 8003e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e48:	4851      	ldr	r0, [pc, #324]	; (8003f90 <_svfiprintf_r+0x1ec>)
 8003e4a:	f7fc f9c9 	bl	80001e0 <memchr>
 8003e4e:	9a04      	ldr	r2, [sp, #16]
 8003e50:	b9d8      	cbnz	r0, 8003e8a <_svfiprintf_r+0xe6>
 8003e52:	06d0      	lsls	r0, r2, #27
 8003e54:	bf44      	itt	mi
 8003e56:	2320      	movmi	r3, #32
 8003e58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e5c:	0711      	lsls	r1, r2, #28
 8003e5e:	bf44      	itt	mi
 8003e60:	232b      	movmi	r3, #43	; 0x2b
 8003e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e66:	f89a 3000 	ldrb.w	r3, [sl]
 8003e6a:	2b2a      	cmp	r3, #42	; 0x2a
 8003e6c:	d015      	beq.n	8003e9a <_svfiprintf_r+0xf6>
 8003e6e:	9a07      	ldr	r2, [sp, #28]
 8003e70:	4654      	mov	r4, sl
 8003e72:	2000      	movs	r0, #0
 8003e74:	f04f 0c0a 	mov.w	ip, #10
 8003e78:	4621      	mov	r1, r4
 8003e7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e7e:	3b30      	subs	r3, #48	; 0x30
 8003e80:	2b09      	cmp	r3, #9
 8003e82:	d94e      	bls.n	8003f22 <_svfiprintf_r+0x17e>
 8003e84:	b1b0      	cbz	r0, 8003eb4 <_svfiprintf_r+0x110>
 8003e86:	9207      	str	r2, [sp, #28]
 8003e88:	e014      	b.n	8003eb4 <_svfiprintf_r+0x110>
 8003e8a:	eba0 0308 	sub.w	r3, r0, r8
 8003e8e:	fa09 f303 	lsl.w	r3, r9, r3
 8003e92:	4313      	orrs	r3, r2
 8003e94:	9304      	str	r3, [sp, #16]
 8003e96:	46a2      	mov	sl, r4
 8003e98:	e7d2      	b.n	8003e40 <_svfiprintf_r+0x9c>
 8003e9a:	9b03      	ldr	r3, [sp, #12]
 8003e9c:	1d19      	adds	r1, r3, #4
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	9103      	str	r1, [sp, #12]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	bfbb      	ittet	lt
 8003ea6:	425b      	neglt	r3, r3
 8003ea8:	f042 0202 	orrlt.w	r2, r2, #2
 8003eac:	9307      	strge	r3, [sp, #28]
 8003eae:	9307      	strlt	r3, [sp, #28]
 8003eb0:	bfb8      	it	lt
 8003eb2:	9204      	strlt	r2, [sp, #16]
 8003eb4:	7823      	ldrb	r3, [r4, #0]
 8003eb6:	2b2e      	cmp	r3, #46	; 0x2e
 8003eb8:	d10c      	bne.n	8003ed4 <_svfiprintf_r+0x130>
 8003eba:	7863      	ldrb	r3, [r4, #1]
 8003ebc:	2b2a      	cmp	r3, #42	; 0x2a
 8003ebe:	d135      	bne.n	8003f2c <_svfiprintf_r+0x188>
 8003ec0:	9b03      	ldr	r3, [sp, #12]
 8003ec2:	1d1a      	adds	r2, r3, #4
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	9203      	str	r2, [sp, #12]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	bfb8      	it	lt
 8003ecc:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ed0:	3402      	adds	r4, #2
 8003ed2:	9305      	str	r3, [sp, #20]
 8003ed4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003fa0 <_svfiprintf_r+0x1fc>
 8003ed8:	7821      	ldrb	r1, [r4, #0]
 8003eda:	2203      	movs	r2, #3
 8003edc:	4650      	mov	r0, sl
 8003ede:	f7fc f97f 	bl	80001e0 <memchr>
 8003ee2:	b140      	cbz	r0, 8003ef6 <_svfiprintf_r+0x152>
 8003ee4:	2340      	movs	r3, #64	; 0x40
 8003ee6:	eba0 000a 	sub.w	r0, r0, sl
 8003eea:	fa03 f000 	lsl.w	r0, r3, r0
 8003eee:	9b04      	ldr	r3, [sp, #16]
 8003ef0:	4303      	orrs	r3, r0
 8003ef2:	3401      	adds	r4, #1
 8003ef4:	9304      	str	r3, [sp, #16]
 8003ef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003efa:	4826      	ldr	r0, [pc, #152]	; (8003f94 <_svfiprintf_r+0x1f0>)
 8003efc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f00:	2206      	movs	r2, #6
 8003f02:	f7fc f96d 	bl	80001e0 <memchr>
 8003f06:	2800      	cmp	r0, #0
 8003f08:	d038      	beq.n	8003f7c <_svfiprintf_r+0x1d8>
 8003f0a:	4b23      	ldr	r3, [pc, #140]	; (8003f98 <_svfiprintf_r+0x1f4>)
 8003f0c:	bb1b      	cbnz	r3, 8003f56 <_svfiprintf_r+0x1b2>
 8003f0e:	9b03      	ldr	r3, [sp, #12]
 8003f10:	3307      	adds	r3, #7
 8003f12:	f023 0307 	bic.w	r3, r3, #7
 8003f16:	3308      	adds	r3, #8
 8003f18:	9303      	str	r3, [sp, #12]
 8003f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f1c:	4433      	add	r3, r6
 8003f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8003f20:	e767      	b.n	8003df2 <_svfiprintf_r+0x4e>
 8003f22:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f26:	460c      	mov	r4, r1
 8003f28:	2001      	movs	r0, #1
 8003f2a:	e7a5      	b.n	8003e78 <_svfiprintf_r+0xd4>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	3401      	adds	r4, #1
 8003f30:	9305      	str	r3, [sp, #20]
 8003f32:	4619      	mov	r1, r3
 8003f34:	f04f 0c0a 	mov.w	ip, #10
 8003f38:	4620      	mov	r0, r4
 8003f3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f3e:	3a30      	subs	r2, #48	; 0x30
 8003f40:	2a09      	cmp	r2, #9
 8003f42:	d903      	bls.n	8003f4c <_svfiprintf_r+0x1a8>
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0c5      	beq.n	8003ed4 <_svfiprintf_r+0x130>
 8003f48:	9105      	str	r1, [sp, #20]
 8003f4a:	e7c3      	b.n	8003ed4 <_svfiprintf_r+0x130>
 8003f4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f50:	4604      	mov	r4, r0
 8003f52:	2301      	movs	r3, #1
 8003f54:	e7f0      	b.n	8003f38 <_svfiprintf_r+0x194>
 8003f56:	ab03      	add	r3, sp, #12
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	462a      	mov	r2, r5
 8003f5c:	4b0f      	ldr	r3, [pc, #60]	; (8003f9c <_svfiprintf_r+0x1f8>)
 8003f5e:	a904      	add	r1, sp, #16
 8003f60:	4638      	mov	r0, r7
 8003f62:	f3af 8000 	nop.w
 8003f66:	1c42      	adds	r2, r0, #1
 8003f68:	4606      	mov	r6, r0
 8003f6a:	d1d6      	bne.n	8003f1a <_svfiprintf_r+0x176>
 8003f6c:	89ab      	ldrh	r3, [r5, #12]
 8003f6e:	065b      	lsls	r3, r3, #25
 8003f70:	f53f af2c 	bmi.w	8003dcc <_svfiprintf_r+0x28>
 8003f74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f76:	b01d      	add	sp, #116	; 0x74
 8003f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f7c:	ab03      	add	r3, sp, #12
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	462a      	mov	r2, r5
 8003f82:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <_svfiprintf_r+0x1f8>)
 8003f84:	a904      	add	r1, sp, #16
 8003f86:	4638      	mov	r0, r7
 8003f88:	f000 f87a 	bl	8004080 <_printf_i>
 8003f8c:	e7eb      	b.n	8003f66 <_svfiprintf_r+0x1c2>
 8003f8e:	bf00      	nop
 8003f90:	080045fc 	.word	0x080045fc
 8003f94:	08004606 	.word	0x08004606
 8003f98:	00000000 	.word	0x00000000
 8003f9c:	08003ced 	.word	0x08003ced
 8003fa0:	08004602 	.word	0x08004602

08003fa4 <_printf_common>:
 8003fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa8:	4616      	mov	r6, r2
 8003faa:	4699      	mov	r9, r3
 8003fac:	688a      	ldr	r2, [r1, #8]
 8003fae:	690b      	ldr	r3, [r1, #16]
 8003fb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	bfb8      	it	lt
 8003fb8:	4613      	movlt	r3, r2
 8003fba:	6033      	str	r3, [r6, #0]
 8003fbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fc0:	4607      	mov	r7, r0
 8003fc2:	460c      	mov	r4, r1
 8003fc4:	b10a      	cbz	r2, 8003fca <_printf_common+0x26>
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	6033      	str	r3, [r6, #0]
 8003fca:	6823      	ldr	r3, [r4, #0]
 8003fcc:	0699      	lsls	r1, r3, #26
 8003fce:	bf42      	ittt	mi
 8003fd0:	6833      	ldrmi	r3, [r6, #0]
 8003fd2:	3302      	addmi	r3, #2
 8003fd4:	6033      	strmi	r3, [r6, #0]
 8003fd6:	6825      	ldr	r5, [r4, #0]
 8003fd8:	f015 0506 	ands.w	r5, r5, #6
 8003fdc:	d106      	bne.n	8003fec <_printf_common+0x48>
 8003fde:	f104 0a19 	add.w	sl, r4, #25
 8003fe2:	68e3      	ldr	r3, [r4, #12]
 8003fe4:	6832      	ldr	r2, [r6, #0]
 8003fe6:	1a9b      	subs	r3, r3, r2
 8003fe8:	42ab      	cmp	r3, r5
 8003fea:	dc26      	bgt.n	800403a <_printf_common+0x96>
 8003fec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ff0:	1e13      	subs	r3, r2, #0
 8003ff2:	6822      	ldr	r2, [r4, #0]
 8003ff4:	bf18      	it	ne
 8003ff6:	2301      	movne	r3, #1
 8003ff8:	0692      	lsls	r2, r2, #26
 8003ffa:	d42b      	bmi.n	8004054 <_printf_common+0xb0>
 8003ffc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004000:	4649      	mov	r1, r9
 8004002:	4638      	mov	r0, r7
 8004004:	47c0      	blx	r8
 8004006:	3001      	adds	r0, #1
 8004008:	d01e      	beq.n	8004048 <_printf_common+0xa4>
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	68e5      	ldr	r5, [r4, #12]
 800400e:	6832      	ldr	r2, [r6, #0]
 8004010:	f003 0306 	and.w	r3, r3, #6
 8004014:	2b04      	cmp	r3, #4
 8004016:	bf08      	it	eq
 8004018:	1aad      	subeq	r5, r5, r2
 800401a:	68a3      	ldr	r3, [r4, #8]
 800401c:	6922      	ldr	r2, [r4, #16]
 800401e:	bf0c      	ite	eq
 8004020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004024:	2500      	movne	r5, #0
 8004026:	4293      	cmp	r3, r2
 8004028:	bfc4      	itt	gt
 800402a:	1a9b      	subgt	r3, r3, r2
 800402c:	18ed      	addgt	r5, r5, r3
 800402e:	2600      	movs	r6, #0
 8004030:	341a      	adds	r4, #26
 8004032:	42b5      	cmp	r5, r6
 8004034:	d11a      	bne.n	800406c <_printf_common+0xc8>
 8004036:	2000      	movs	r0, #0
 8004038:	e008      	b.n	800404c <_printf_common+0xa8>
 800403a:	2301      	movs	r3, #1
 800403c:	4652      	mov	r2, sl
 800403e:	4649      	mov	r1, r9
 8004040:	4638      	mov	r0, r7
 8004042:	47c0      	blx	r8
 8004044:	3001      	adds	r0, #1
 8004046:	d103      	bne.n	8004050 <_printf_common+0xac>
 8004048:	f04f 30ff 	mov.w	r0, #4294967295
 800404c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004050:	3501      	adds	r5, #1
 8004052:	e7c6      	b.n	8003fe2 <_printf_common+0x3e>
 8004054:	18e1      	adds	r1, r4, r3
 8004056:	1c5a      	adds	r2, r3, #1
 8004058:	2030      	movs	r0, #48	; 0x30
 800405a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800405e:	4422      	add	r2, r4
 8004060:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004064:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004068:	3302      	adds	r3, #2
 800406a:	e7c7      	b.n	8003ffc <_printf_common+0x58>
 800406c:	2301      	movs	r3, #1
 800406e:	4622      	mov	r2, r4
 8004070:	4649      	mov	r1, r9
 8004072:	4638      	mov	r0, r7
 8004074:	47c0      	blx	r8
 8004076:	3001      	adds	r0, #1
 8004078:	d0e6      	beq.n	8004048 <_printf_common+0xa4>
 800407a:	3601      	adds	r6, #1
 800407c:	e7d9      	b.n	8004032 <_printf_common+0x8e>
	...

08004080 <_printf_i>:
 8004080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004084:	460c      	mov	r4, r1
 8004086:	4691      	mov	r9, r2
 8004088:	7e27      	ldrb	r7, [r4, #24]
 800408a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800408c:	2f78      	cmp	r7, #120	; 0x78
 800408e:	4680      	mov	r8, r0
 8004090:	469a      	mov	sl, r3
 8004092:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004096:	d807      	bhi.n	80040a8 <_printf_i+0x28>
 8004098:	2f62      	cmp	r7, #98	; 0x62
 800409a:	d80a      	bhi.n	80040b2 <_printf_i+0x32>
 800409c:	2f00      	cmp	r7, #0
 800409e:	f000 80d8 	beq.w	8004252 <_printf_i+0x1d2>
 80040a2:	2f58      	cmp	r7, #88	; 0x58
 80040a4:	f000 80a3 	beq.w	80041ee <_printf_i+0x16e>
 80040a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80040ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040b0:	e03a      	b.n	8004128 <_printf_i+0xa8>
 80040b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040b6:	2b15      	cmp	r3, #21
 80040b8:	d8f6      	bhi.n	80040a8 <_printf_i+0x28>
 80040ba:	a001      	add	r0, pc, #4	; (adr r0, 80040c0 <_printf_i+0x40>)
 80040bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80040c0:	08004119 	.word	0x08004119
 80040c4:	0800412d 	.word	0x0800412d
 80040c8:	080040a9 	.word	0x080040a9
 80040cc:	080040a9 	.word	0x080040a9
 80040d0:	080040a9 	.word	0x080040a9
 80040d4:	080040a9 	.word	0x080040a9
 80040d8:	0800412d 	.word	0x0800412d
 80040dc:	080040a9 	.word	0x080040a9
 80040e0:	080040a9 	.word	0x080040a9
 80040e4:	080040a9 	.word	0x080040a9
 80040e8:	080040a9 	.word	0x080040a9
 80040ec:	08004239 	.word	0x08004239
 80040f0:	0800415d 	.word	0x0800415d
 80040f4:	0800421b 	.word	0x0800421b
 80040f8:	080040a9 	.word	0x080040a9
 80040fc:	080040a9 	.word	0x080040a9
 8004100:	0800425b 	.word	0x0800425b
 8004104:	080040a9 	.word	0x080040a9
 8004108:	0800415d 	.word	0x0800415d
 800410c:	080040a9 	.word	0x080040a9
 8004110:	080040a9 	.word	0x080040a9
 8004114:	08004223 	.word	0x08004223
 8004118:	680b      	ldr	r3, [r1, #0]
 800411a:	1d1a      	adds	r2, r3, #4
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	600a      	str	r2, [r1, #0]
 8004120:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004128:	2301      	movs	r3, #1
 800412a:	e0a3      	b.n	8004274 <_printf_i+0x1f4>
 800412c:	6825      	ldr	r5, [r4, #0]
 800412e:	6808      	ldr	r0, [r1, #0]
 8004130:	062e      	lsls	r6, r5, #24
 8004132:	f100 0304 	add.w	r3, r0, #4
 8004136:	d50a      	bpl.n	800414e <_printf_i+0xce>
 8004138:	6805      	ldr	r5, [r0, #0]
 800413a:	600b      	str	r3, [r1, #0]
 800413c:	2d00      	cmp	r5, #0
 800413e:	da03      	bge.n	8004148 <_printf_i+0xc8>
 8004140:	232d      	movs	r3, #45	; 0x2d
 8004142:	426d      	negs	r5, r5
 8004144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004148:	485e      	ldr	r0, [pc, #376]	; (80042c4 <_printf_i+0x244>)
 800414a:	230a      	movs	r3, #10
 800414c:	e019      	b.n	8004182 <_printf_i+0x102>
 800414e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004152:	6805      	ldr	r5, [r0, #0]
 8004154:	600b      	str	r3, [r1, #0]
 8004156:	bf18      	it	ne
 8004158:	b22d      	sxthne	r5, r5
 800415a:	e7ef      	b.n	800413c <_printf_i+0xbc>
 800415c:	680b      	ldr	r3, [r1, #0]
 800415e:	6825      	ldr	r5, [r4, #0]
 8004160:	1d18      	adds	r0, r3, #4
 8004162:	6008      	str	r0, [r1, #0]
 8004164:	0628      	lsls	r0, r5, #24
 8004166:	d501      	bpl.n	800416c <_printf_i+0xec>
 8004168:	681d      	ldr	r5, [r3, #0]
 800416a:	e002      	b.n	8004172 <_printf_i+0xf2>
 800416c:	0669      	lsls	r1, r5, #25
 800416e:	d5fb      	bpl.n	8004168 <_printf_i+0xe8>
 8004170:	881d      	ldrh	r5, [r3, #0]
 8004172:	4854      	ldr	r0, [pc, #336]	; (80042c4 <_printf_i+0x244>)
 8004174:	2f6f      	cmp	r7, #111	; 0x6f
 8004176:	bf0c      	ite	eq
 8004178:	2308      	moveq	r3, #8
 800417a:	230a      	movne	r3, #10
 800417c:	2100      	movs	r1, #0
 800417e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004182:	6866      	ldr	r6, [r4, #4]
 8004184:	60a6      	str	r6, [r4, #8]
 8004186:	2e00      	cmp	r6, #0
 8004188:	bfa2      	ittt	ge
 800418a:	6821      	ldrge	r1, [r4, #0]
 800418c:	f021 0104 	bicge.w	r1, r1, #4
 8004190:	6021      	strge	r1, [r4, #0]
 8004192:	b90d      	cbnz	r5, 8004198 <_printf_i+0x118>
 8004194:	2e00      	cmp	r6, #0
 8004196:	d04d      	beq.n	8004234 <_printf_i+0x1b4>
 8004198:	4616      	mov	r6, r2
 800419a:	fbb5 f1f3 	udiv	r1, r5, r3
 800419e:	fb03 5711 	mls	r7, r3, r1, r5
 80041a2:	5dc7      	ldrb	r7, [r0, r7]
 80041a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041a8:	462f      	mov	r7, r5
 80041aa:	42bb      	cmp	r3, r7
 80041ac:	460d      	mov	r5, r1
 80041ae:	d9f4      	bls.n	800419a <_printf_i+0x11a>
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d10b      	bne.n	80041cc <_printf_i+0x14c>
 80041b4:	6823      	ldr	r3, [r4, #0]
 80041b6:	07df      	lsls	r7, r3, #31
 80041b8:	d508      	bpl.n	80041cc <_printf_i+0x14c>
 80041ba:	6923      	ldr	r3, [r4, #16]
 80041bc:	6861      	ldr	r1, [r4, #4]
 80041be:	4299      	cmp	r1, r3
 80041c0:	bfde      	ittt	le
 80041c2:	2330      	movle	r3, #48	; 0x30
 80041c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041cc:	1b92      	subs	r2, r2, r6
 80041ce:	6122      	str	r2, [r4, #16]
 80041d0:	f8cd a000 	str.w	sl, [sp]
 80041d4:	464b      	mov	r3, r9
 80041d6:	aa03      	add	r2, sp, #12
 80041d8:	4621      	mov	r1, r4
 80041da:	4640      	mov	r0, r8
 80041dc:	f7ff fee2 	bl	8003fa4 <_printf_common>
 80041e0:	3001      	adds	r0, #1
 80041e2:	d14c      	bne.n	800427e <_printf_i+0x1fe>
 80041e4:	f04f 30ff 	mov.w	r0, #4294967295
 80041e8:	b004      	add	sp, #16
 80041ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ee:	4835      	ldr	r0, [pc, #212]	; (80042c4 <_printf_i+0x244>)
 80041f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	680e      	ldr	r6, [r1, #0]
 80041f8:	061f      	lsls	r7, r3, #24
 80041fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80041fe:	600e      	str	r6, [r1, #0]
 8004200:	d514      	bpl.n	800422c <_printf_i+0x1ac>
 8004202:	07d9      	lsls	r1, r3, #31
 8004204:	bf44      	itt	mi
 8004206:	f043 0320 	orrmi.w	r3, r3, #32
 800420a:	6023      	strmi	r3, [r4, #0]
 800420c:	b91d      	cbnz	r5, 8004216 <_printf_i+0x196>
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	f023 0320 	bic.w	r3, r3, #32
 8004214:	6023      	str	r3, [r4, #0]
 8004216:	2310      	movs	r3, #16
 8004218:	e7b0      	b.n	800417c <_printf_i+0xfc>
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	f043 0320 	orr.w	r3, r3, #32
 8004220:	6023      	str	r3, [r4, #0]
 8004222:	2378      	movs	r3, #120	; 0x78
 8004224:	4828      	ldr	r0, [pc, #160]	; (80042c8 <_printf_i+0x248>)
 8004226:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800422a:	e7e3      	b.n	80041f4 <_printf_i+0x174>
 800422c:	065e      	lsls	r6, r3, #25
 800422e:	bf48      	it	mi
 8004230:	b2ad      	uxthmi	r5, r5
 8004232:	e7e6      	b.n	8004202 <_printf_i+0x182>
 8004234:	4616      	mov	r6, r2
 8004236:	e7bb      	b.n	80041b0 <_printf_i+0x130>
 8004238:	680b      	ldr	r3, [r1, #0]
 800423a:	6826      	ldr	r6, [r4, #0]
 800423c:	6960      	ldr	r0, [r4, #20]
 800423e:	1d1d      	adds	r5, r3, #4
 8004240:	600d      	str	r5, [r1, #0]
 8004242:	0635      	lsls	r5, r6, #24
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	d501      	bpl.n	800424c <_printf_i+0x1cc>
 8004248:	6018      	str	r0, [r3, #0]
 800424a:	e002      	b.n	8004252 <_printf_i+0x1d2>
 800424c:	0671      	lsls	r1, r6, #25
 800424e:	d5fb      	bpl.n	8004248 <_printf_i+0x1c8>
 8004250:	8018      	strh	r0, [r3, #0]
 8004252:	2300      	movs	r3, #0
 8004254:	6123      	str	r3, [r4, #16]
 8004256:	4616      	mov	r6, r2
 8004258:	e7ba      	b.n	80041d0 <_printf_i+0x150>
 800425a:	680b      	ldr	r3, [r1, #0]
 800425c:	1d1a      	adds	r2, r3, #4
 800425e:	600a      	str	r2, [r1, #0]
 8004260:	681e      	ldr	r6, [r3, #0]
 8004262:	6862      	ldr	r2, [r4, #4]
 8004264:	2100      	movs	r1, #0
 8004266:	4630      	mov	r0, r6
 8004268:	f7fb ffba 	bl	80001e0 <memchr>
 800426c:	b108      	cbz	r0, 8004272 <_printf_i+0x1f2>
 800426e:	1b80      	subs	r0, r0, r6
 8004270:	6060      	str	r0, [r4, #4]
 8004272:	6863      	ldr	r3, [r4, #4]
 8004274:	6123      	str	r3, [r4, #16]
 8004276:	2300      	movs	r3, #0
 8004278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800427c:	e7a8      	b.n	80041d0 <_printf_i+0x150>
 800427e:	6923      	ldr	r3, [r4, #16]
 8004280:	4632      	mov	r2, r6
 8004282:	4649      	mov	r1, r9
 8004284:	4640      	mov	r0, r8
 8004286:	47d0      	blx	sl
 8004288:	3001      	adds	r0, #1
 800428a:	d0ab      	beq.n	80041e4 <_printf_i+0x164>
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	079b      	lsls	r3, r3, #30
 8004290:	d413      	bmi.n	80042ba <_printf_i+0x23a>
 8004292:	68e0      	ldr	r0, [r4, #12]
 8004294:	9b03      	ldr	r3, [sp, #12]
 8004296:	4298      	cmp	r0, r3
 8004298:	bfb8      	it	lt
 800429a:	4618      	movlt	r0, r3
 800429c:	e7a4      	b.n	80041e8 <_printf_i+0x168>
 800429e:	2301      	movs	r3, #1
 80042a0:	4632      	mov	r2, r6
 80042a2:	4649      	mov	r1, r9
 80042a4:	4640      	mov	r0, r8
 80042a6:	47d0      	blx	sl
 80042a8:	3001      	adds	r0, #1
 80042aa:	d09b      	beq.n	80041e4 <_printf_i+0x164>
 80042ac:	3501      	adds	r5, #1
 80042ae:	68e3      	ldr	r3, [r4, #12]
 80042b0:	9903      	ldr	r1, [sp, #12]
 80042b2:	1a5b      	subs	r3, r3, r1
 80042b4:	42ab      	cmp	r3, r5
 80042b6:	dcf2      	bgt.n	800429e <_printf_i+0x21e>
 80042b8:	e7eb      	b.n	8004292 <_printf_i+0x212>
 80042ba:	2500      	movs	r5, #0
 80042bc:	f104 0619 	add.w	r6, r4, #25
 80042c0:	e7f5      	b.n	80042ae <_printf_i+0x22e>
 80042c2:	bf00      	nop
 80042c4:	0800460d 	.word	0x0800460d
 80042c8:	0800461e 	.word	0x0800461e

080042cc <memmove>:
 80042cc:	4288      	cmp	r0, r1
 80042ce:	b510      	push	{r4, lr}
 80042d0:	eb01 0402 	add.w	r4, r1, r2
 80042d4:	d902      	bls.n	80042dc <memmove+0x10>
 80042d6:	4284      	cmp	r4, r0
 80042d8:	4623      	mov	r3, r4
 80042da:	d807      	bhi.n	80042ec <memmove+0x20>
 80042dc:	1e43      	subs	r3, r0, #1
 80042de:	42a1      	cmp	r1, r4
 80042e0:	d008      	beq.n	80042f4 <memmove+0x28>
 80042e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042ea:	e7f8      	b.n	80042de <memmove+0x12>
 80042ec:	4402      	add	r2, r0
 80042ee:	4601      	mov	r1, r0
 80042f0:	428a      	cmp	r2, r1
 80042f2:	d100      	bne.n	80042f6 <memmove+0x2a>
 80042f4:	bd10      	pop	{r4, pc}
 80042f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042fe:	e7f7      	b.n	80042f0 <memmove+0x24>

08004300 <_free_r>:
 8004300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004302:	2900      	cmp	r1, #0
 8004304:	d048      	beq.n	8004398 <_free_r+0x98>
 8004306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800430a:	9001      	str	r0, [sp, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	f1a1 0404 	sub.w	r4, r1, #4
 8004312:	bfb8      	it	lt
 8004314:	18e4      	addlt	r4, r4, r3
 8004316:	f000 f8d3 	bl	80044c0 <__malloc_lock>
 800431a:	4a20      	ldr	r2, [pc, #128]	; (800439c <_free_r+0x9c>)
 800431c:	9801      	ldr	r0, [sp, #4]
 800431e:	6813      	ldr	r3, [r2, #0]
 8004320:	4615      	mov	r5, r2
 8004322:	b933      	cbnz	r3, 8004332 <_free_r+0x32>
 8004324:	6063      	str	r3, [r4, #4]
 8004326:	6014      	str	r4, [r2, #0]
 8004328:	b003      	add	sp, #12
 800432a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800432e:	f000 b8cd 	b.w	80044cc <__malloc_unlock>
 8004332:	42a3      	cmp	r3, r4
 8004334:	d90b      	bls.n	800434e <_free_r+0x4e>
 8004336:	6821      	ldr	r1, [r4, #0]
 8004338:	1862      	adds	r2, r4, r1
 800433a:	4293      	cmp	r3, r2
 800433c:	bf04      	itt	eq
 800433e:	681a      	ldreq	r2, [r3, #0]
 8004340:	685b      	ldreq	r3, [r3, #4]
 8004342:	6063      	str	r3, [r4, #4]
 8004344:	bf04      	itt	eq
 8004346:	1852      	addeq	r2, r2, r1
 8004348:	6022      	streq	r2, [r4, #0]
 800434a:	602c      	str	r4, [r5, #0]
 800434c:	e7ec      	b.n	8004328 <_free_r+0x28>
 800434e:	461a      	mov	r2, r3
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	b10b      	cbz	r3, 8004358 <_free_r+0x58>
 8004354:	42a3      	cmp	r3, r4
 8004356:	d9fa      	bls.n	800434e <_free_r+0x4e>
 8004358:	6811      	ldr	r1, [r2, #0]
 800435a:	1855      	adds	r5, r2, r1
 800435c:	42a5      	cmp	r5, r4
 800435e:	d10b      	bne.n	8004378 <_free_r+0x78>
 8004360:	6824      	ldr	r4, [r4, #0]
 8004362:	4421      	add	r1, r4
 8004364:	1854      	adds	r4, r2, r1
 8004366:	42a3      	cmp	r3, r4
 8004368:	6011      	str	r1, [r2, #0]
 800436a:	d1dd      	bne.n	8004328 <_free_r+0x28>
 800436c:	681c      	ldr	r4, [r3, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	6053      	str	r3, [r2, #4]
 8004372:	4421      	add	r1, r4
 8004374:	6011      	str	r1, [r2, #0]
 8004376:	e7d7      	b.n	8004328 <_free_r+0x28>
 8004378:	d902      	bls.n	8004380 <_free_r+0x80>
 800437a:	230c      	movs	r3, #12
 800437c:	6003      	str	r3, [r0, #0]
 800437e:	e7d3      	b.n	8004328 <_free_r+0x28>
 8004380:	6825      	ldr	r5, [r4, #0]
 8004382:	1961      	adds	r1, r4, r5
 8004384:	428b      	cmp	r3, r1
 8004386:	bf04      	itt	eq
 8004388:	6819      	ldreq	r1, [r3, #0]
 800438a:	685b      	ldreq	r3, [r3, #4]
 800438c:	6063      	str	r3, [r4, #4]
 800438e:	bf04      	itt	eq
 8004390:	1949      	addeq	r1, r1, r5
 8004392:	6021      	streq	r1, [r4, #0]
 8004394:	6054      	str	r4, [r2, #4]
 8004396:	e7c7      	b.n	8004328 <_free_r+0x28>
 8004398:	b003      	add	sp, #12
 800439a:	bd30      	pop	{r4, r5, pc}
 800439c:	2000403c 	.word	0x2000403c

080043a0 <_malloc_r>:
 80043a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a2:	1ccd      	adds	r5, r1, #3
 80043a4:	f025 0503 	bic.w	r5, r5, #3
 80043a8:	3508      	adds	r5, #8
 80043aa:	2d0c      	cmp	r5, #12
 80043ac:	bf38      	it	cc
 80043ae:	250c      	movcc	r5, #12
 80043b0:	2d00      	cmp	r5, #0
 80043b2:	4606      	mov	r6, r0
 80043b4:	db01      	blt.n	80043ba <_malloc_r+0x1a>
 80043b6:	42a9      	cmp	r1, r5
 80043b8:	d903      	bls.n	80043c2 <_malloc_r+0x22>
 80043ba:	230c      	movs	r3, #12
 80043bc:	6033      	str	r3, [r6, #0]
 80043be:	2000      	movs	r0, #0
 80043c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043c2:	f000 f87d 	bl	80044c0 <__malloc_lock>
 80043c6:	4921      	ldr	r1, [pc, #132]	; (800444c <_malloc_r+0xac>)
 80043c8:	680a      	ldr	r2, [r1, #0]
 80043ca:	4614      	mov	r4, r2
 80043cc:	b99c      	cbnz	r4, 80043f6 <_malloc_r+0x56>
 80043ce:	4f20      	ldr	r7, [pc, #128]	; (8004450 <_malloc_r+0xb0>)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	b923      	cbnz	r3, 80043de <_malloc_r+0x3e>
 80043d4:	4621      	mov	r1, r4
 80043d6:	4630      	mov	r0, r6
 80043d8:	f000 f862 	bl	80044a0 <_sbrk_r>
 80043dc:	6038      	str	r0, [r7, #0]
 80043de:	4629      	mov	r1, r5
 80043e0:	4630      	mov	r0, r6
 80043e2:	f000 f85d 	bl	80044a0 <_sbrk_r>
 80043e6:	1c43      	adds	r3, r0, #1
 80043e8:	d123      	bne.n	8004432 <_malloc_r+0x92>
 80043ea:	230c      	movs	r3, #12
 80043ec:	6033      	str	r3, [r6, #0]
 80043ee:	4630      	mov	r0, r6
 80043f0:	f000 f86c 	bl	80044cc <__malloc_unlock>
 80043f4:	e7e3      	b.n	80043be <_malloc_r+0x1e>
 80043f6:	6823      	ldr	r3, [r4, #0]
 80043f8:	1b5b      	subs	r3, r3, r5
 80043fa:	d417      	bmi.n	800442c <_malloc_r+0x8c>
 80043fc:	2b0b      	cmp	r3, #11
 80043fe:	d903      	bls.n	8004408 <_malloc_r+0x68>
 8004400:	6023      	str	r3, [r4, #0]
 8004402:	441c      	add	r4, r3
 8004404:	6025      	str	r5, [r4, #0]
 8004406:	e004      	b.n	8004412 <_malloc_r+0x72>
 8004408:	6863      	ldr	r3, [r4, #4]
 800440a:	42a2      	cmp	r2, r4
 800440c:	bf0c      	ite	eq
 800440e:	600b      	streq	r3, [r1, #0]
 8004410:	6053      	strne	r3, [r2, #4]
 8004412:	4630      	mov	r0, r6
 8004414:	f000 f85a 	bl	80044cc <__malloc_unlock>
 8004418:	f104 000b 	add.w	r0, r4, #11
 800441c:	1d23      	adds	r3, r4, #4
 800441e:	f020 0007 	bic.w	r0, r0, #7
 8004422:	1ac2      	subs	r2, r0, r3
 8004424:	d0cc      	beq.n	80043c0 <_malloc_r+0x20>
 8004426:	1a1b      	subs	r3, r3, r0
 8004428:	50a3      	str	r3, [r4, r2]
 800442a:	e7c9      	b.n	80043c0 <_malloc_r+0x20>
 800442c:	4622      	mov	r2, r4
 800442e:	6864      	ldr	r4, [r4, #4]
 8004430:	e7cc      	b.n	80043cc <_malloc_r+0x2c>
 8004432:	1cc4      	adds	r4, r0, #3
 8004434:	f024 0403 	bic.w	r4, r4, #3
 8004438:	42a0      	cmp	r0, r4
 800443a:	d0e3      	beq.n	8004404 <_malloc_r+0x64>
 800443c:	1a21      	subs	r1, r4, r0
 800443e:	4630      	mov	r0, r6
 8004440:	f000 f82e 	bl	80044a0 <_sbrk_r>
 8004444:	3001      	adds	r0, #1
 8004446:	d1dd      	bne.n	8004404 <_malloc_r+0x64>
 8004448:	e7cf      	b.n	80043ea <_malloc_r+0x4a>
 800444a:	bf00      	nop
 800444c:	2000403c 	.word	0x2000403c
 8004450:	20004040 	.word	0x20004040

08004454 <_realloc_r>:
 8004454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004456:	4607      	mov	r7, r0
 8004458:	4614      	mov	r4, r2
 800445a:	460e      	mov	r6, r1
 800445c:	b921      	cbnz	r1, 8004468 <_realloc_r+0x14>
 800445e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004462:	4611      	mov	r1, r2
 8004464:	f7ff bf9c 	b.w	80043a0 <_malloc_r>
 8004468:	b922      	cbnz	r2, 8004474 <_realloc_r+0x20>
 800446a:	f7ff ff49 	bl	8004300 <_free_r>
 800446e:	4625      	mov	r5, r4
 8004470:	4628      	mov	r0, r5
 8004472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004474:	f000 f830 	bl	80044d8 <_malloc_usable_size_r>
 8004478:	42a0      	cmp	r0, r4
 800447a:	d20f      	bcs.n	800449c <_realloc_r+0x48>
 800447c:	4621      	mov	r1, r4
 800447e:	4638      	mov	r0, r7
 8004480:	f7ff ff8e 	bl	80043a0 <_malloc_r>
 8004484:	4605      	mov	r5, r0
 8004486:	2800      	cmp	r0, #0
 8004488:	d0f2      	beq.n	8004470 <_realloc_r+0x1c>
 800448a:	4631      	mov	r1, r6
 800448c:	4622      	mov	r2, r4
 800448e:	f7ff fbf7 	bl	8003c80 <memcpy>
 8004492:	4631      	mov	r1, r6
 8004494:	4638      	mov	r0, r7
 8004496:	f7ff ff33 	bl	8004300 <_free_r>
 800449a:	e7e9      	b.n	8004470 <_realloc_r+0x1c>
 800449c:	4635      	mov	r5, r6
 800449e:	e7e7      	b.n	8004470 <_realloc_r+0x1c>

080044a0 <_sbrk_r>:
 80044a0:	b538      	push	{r3, r4, r5, lr}
 80044a2:	4d06      	ldr	r5, [pc, #24]	; (80044bc <_sbrk_r+0x1c>)
 80044a4:	2300      	movs	r3, #0
 80044a6:	4604      	mov	r4, r0
 80044a8:	4608      	mov	r0, r1
 80044aa:	602b      	str	r3, [r5, #0]
 80044ac:	f7fc fb36 	bl	8000b1c <_sbrk>
 80044b0:	1c43      	adds	r3, r0, #1
 80044b2:	d102      	bne.n	80044ba <_sbrk_r+0x1a>
 80044b4:	682b      	ldr	r3, [r5, #0]
 80044b6:	b103      	cbz	r3, 80044ba <_sbrk_r+0x1a>
 80044b8:	6023      	str	r3, [r4, #0]
 80044ba:	bd38      	pop	{r3, r4, r5, pc}
 80044bc:	20004104 	.word	0x20004104

080044c0 <__malloc_lock>:
 80044c0:	4801      	ldr	r0, [pc, #4]	; (80044c8 <__malloc_lock+0x8>)
 80044c2:	f000 b811 	b.w	80044e8 <__retarget_lock_acquire_recursive>
 80044c6:	bf00      	nop
 80044c8:	2000410c 	.word	0x2000410c

080044cc <__malloc_unlock>:
 80044cc:	4801      	ldr	r0, [pc, #4]	; (80044d4 <__malloc_unlock+0x8>)
 80044ce:	f000 b80c 	b.w	80044ea <__retarget_lock_release_recursive>
 80044d2:	bf00      	nop
 80044d4:	2000410c 	.word	0x2000410c

080044d8 <_malloc_usable_size_r>:
 80044d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044dc:	1f18      	subs	r0, r3, #4
 80044de:	2b00      	cmp	r3, #0
 80044e0:	bfbc      	itt	lt
 80044e2:	580b      	ldrlt	r3, [r1, r0]
 80044e4:	18c0      	addlt	r0, r0, r3
 80044e6:	4770      	bx	lr

080044e8 <__retarget_lock_acquire_recursive>:
 80044e8:	4770      	bx	lr

080044ea <__retarget_lock_release_recursive>:
 80044ea:	4770      	bx	lr

080044ec <_init>:
 80044ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ee:	bf00      	nop
 80044f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044f2:	bc08      	pop	{r3}
 80044f4:	469e      	mov	lr, r3
 80044f6:	4770      	bx	lr

080044f8 <_fini>:
 80044f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fa:	bf00      	nop
 80044fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044fe:	bc08      	pop	{r3}
 8004500:	469e      	mov	lr, r3
 8004502:	4770      	bx	lr
